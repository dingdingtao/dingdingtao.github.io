<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dingdingtao.github.io</id>
    <title>dingdingtao的个人静态网站</title>
    <updated>2021-04-15T02:10:11.347Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dingdingtao.github.io"/>
    <link rel="self" href="https://dingdingtao.github.io/atom.xml"/>
    <subtitle>快快长大</subtitle>
    <logo>https://dingdingtao.github.io/images/avatar.png</logo>
    <icon>https://dingdingtao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, dingdingtao的个人静态网站</rights>
    <entry>
        <title type="html"><![CDATA[pandas函数]]></title>
        <id>https://dingdingtao.github.io/post/pandas-han-shu/</id>
        <link href="https://dingdingtao.github.io/post/pandas-han-shu/">
        </link>
        <updated>2021-04-13T08:39:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="导入数据">导入数据</h2>
<pre><code class="language-python">pd.DataFrame() # 自己创建数据框，用于练习

pd.read_csv(filename) # 从CSV⽂件导⼊数据

pd.read_table(filename) # 从限定分隔符的⽂本⽂件导⼊数据

pd.read_excel(filename) # 从Excel⽂件导⼊数据

pd.read_sql(query,connection_object) # 从SQL表/库导⼊数据

pd.read_json(json_string) # 从JSON格式的字符串导⼊数据

pd.read_html(url) # 解析URL、字符串或者HTML⽂件，抽取其中的tables表格
</code></pre>
<h2 id="导出数据">导出数据</h2>
<pre><code class="language-python">df.to_csv(filename) #导出数据到CSV⽂件

df.to_excel(filename) #导出数据到Excel⽂件

df.to_sql(table_name,connection_object) #导出数据到SQL表

df.to_json(filename) #以Json格式导出数据到⽂本⽂件

writer=pd.ExcelWriter('test.xlsx',index=False) 
df1.to_excel(writer,sheet_name='单位')和writer.save()，将多个数据帧写⼊同⼀个⼯作簿的多个sheet(⼯作表)
</code></pre>
<h2 id="查看数据">查看数据</h2>
<pre><code class="language-python">df.head(n) # 查看DataFrame对象的前n⾏

df.tail(n) # 查看DataFrame对象的最后n⾏

df.shape() # 查看⾏数和列数

df.info() # 查看索引、数据类型和内存信息

df.columns() # 查看字段（⾸⾏）名称

df.describe() # 查看数值型列的汇总统计

s.value_counts(dropna=False) # 查看Series对象的唯⼀值和计数

df.apply(pd.Series.value_counts) # 查看DataFrame对象中每⼀列的唯⼀值和计数

df.isnull().any() # 查看是否有缺失值

df[df[column_name].duplicated()] # 查看column_name字段数据重复的数据信息

df[df[column_name].duplicated()].count() # 查看column_name字段数据重复的个数
</code></pre>
<h2 id="数据选取">数据选取</h2>
<pre><code class="language-python">df[col] # 根据列名，并以Series的形式返回列

df[[col1,col2]] # 以DataFrame形式返回多列

s.iloc[0] # 按位置选取数据

s.loc['index_one'] # 按索引选取数据

df.iloc[0,:] # 返回第⼀⾏

df.iloc[0,0] # 返回第⼀列的第⼀个元素

df.loc[0,:] # 返回第⼀⾏（索引为默认的数字时，⽤法同df.iloc），但需要注意的是loc是按索引,iloc参数只接受数字参数

df.ix[[:5],[&quot;col1&quot;,&quot;col2&quot;]] # 返回字段为col1和col2的前5条数据，可以理解为loc和
iloc的结合体。

df.at[5,&quot;col1&quot;] # 选择索引名称为5，字段名称为col1的数据

df.iat[5,0] # 选择索引排序为5，字段排序为0的数据
</code></pre>
<h2 id="数据处理">数据处理</h2>
<pre><code class="language-python">df.columns= ['a','b','c'] # 重命名列名（需要将所有列名列出，否则会报错）

pd.isnull() # 检查DataFrame对象中的空值，并返回⼀个Boolean数组

pd.notnull() # 检查DataFrame对象中的⾮空值，并返回⼀个Boolean数组

df.dropna() # 删除所有包含空值的⾏

df.dropna(axis=1) # 删除所有包含空值的列

df.dropna(axis=1,thresh=n) # 删除所有⼩于n个⾮空值的⾏

df.fillna(value=x) # ⽤x替换DataFrame对象中所有的空值，⽀持

df[column_name].fillna(x)

s.astype(float) # 将Series中的数据类型更改为float类型

s.replace(1,'one') # ⽤‘one’代替所有等于1的值

s.replace([1,3],['one','three']) # ⽤'one'代替1，⽤'three'代替3

df.rename(columns=lambdax:x+1) # 批量更改列名

df.rename(columns={'old_name':'new_ name'}) # 选择性更改列名

df.set_index('column_one') # 将某个字段设为索引，可接受列表参数，即设置多个索引

df.reset_index(&quot;col1&quot;) # 将索引设置为col1字段，并将索引新设置为0,1,2...

df.rename(index=lambdax:x+1) # 批量重命名索引
</code></pre>
<h2 id="数据分组-排序-透视">数据分组、排序、透视</h2>
<pre><code class="language-python">df.sort_index().loc[:5] # 对前5条数据进⾏索引排序

df.sort_values(col1) # 按照列col1排序数据，默认升序排列

df.sort_values(col2,ascending=False) # 按照列col1降序排列数据

df.sort_values([col1,col2],ascending=[True,False]) # 先按列col1升序排列，后按col2降序排列数据

df.groupby(col) # 返回⼀个按列col进⾏分组的Groupby对象

df.groupby([col1,col2]) # 返回⼀个按多列进⾏分组的Groupby对象

df.groupby(col1)[col2].agg(mean) # 返回按列col1进⾏分组后，列col2的均值,agg可以接受列表参数，agg([len,np.mean])

df.pivot_table(index=col1,values=[col2,col3],aggfunc={col2:max,col3:[ma,min]}) # 创建⼀个按列col1进⾏分组，计算col2的最⼤值和col3的最⼤值、最⼩值的数据透视表

df.groupby(col1).agg(np.mean) # 返回按列col1分组的所有列的均值,⽀持

df.groupby(col1).col2.agg(['min','max'])

data.apply(np.mean) # 对DataFrame中的每⼀列应⽤函数np.mean

data.apply(np.max,axis=1) # 对DataFrame中的每⼀⾏应⽤函数np.max

df.groupby(col1).col2.transform(&quot;sum&quot;) # 通常与groupby连⽤，避免索引更改
</code></pre>
<h2 id="数据合并">数据合并</h2>
<pre><code class="language-python">df1.append(df2) # 将df2中的⾏添加到df1的尾部

df.concat([df1,df2],axis=1,join='inner') # 将df2中的列添加到df1的尾部,值为空的对应⾏与对应列都不要

df1.join(df2.set_index(col1),on=col1,how='inner') # 对df1的列和df2的列执⾏SQL形式的join，默认按照索引来进⾏合并，如果df1和df2有共同字段时，会报错，可通过设置lsuffix,rsuffix来进⾏解决，如果需要按照共同列进⾏合并，就要⽤到set_index(col1)

pd.merge(df1,df2,on='col1',how='outer') # 对df1和df2合并，按照col1，⽅式为outer

pd.merge(df1,df2,left_index=True,right_index=True,how='outer') #与 df1.join(df2, how='outer')效果相同
</code></pre>
<h2 id="参考">参考</h2>
<p>详情参考原文 链接：<a href="https://blog.csdn.net/weixin_41261833/article/details/115598697">https://blog.csdn.net/weixin_41261833/article/details/115598697</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascript箭头函数]]></title>
        <id>https://dingdingtao.github.io/post/javascript-jian-tou-han-shu/</id>
        <link href="https://dingdingtao.github.io/post/javascript-jian-tou-han-shu/">
        </link>
        <updated>2021-03-31T06:14:06.000Z</updated>
        <summary type="html"><![CDATA[<center>
Javascript箭头函数的基本语法、使用场景和使用需要注意的点。
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
Javascript箭头函数的基本语法、使用场景和使用需要注意的点。
</center>
<!-- more -->
<h2 id="箭头函数">箭头函数</h2>
<p>ES6 允许使用“箭头”(<code>=&gt;</code>)定义函数</p>
<pre><code class="language-javascript">var f = v =&gt; v;

//等同于
var f = function(v) {
    return v;
};
</code></pre>
<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p>
<pre><code class="language-javascript">var f = () =&gt; 5;
//等同于
var f = function() { return 5 };

var sum = (num1, num2) =&gt; num1 + num2;
//等同于
var sum = function(num1, num2) {
    return num1 + num2;
};
</code></pre>
<p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用<code>return</code>语句返回。</p>
<pre><code class="language-javascript">var sum = (num1, num2) =&gt; { return num1 + num2; }
</code></pre>
<p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p>
<pre><code class="language-javascript">// 报错
let getTempItem = id =&gt; { id: id, name: &quot;Temp&quot; };

// 不报错
let getTempItem = id =&gt; ({ id: id, name: &quot;Temp&quot; });
</code></pre>
<p>下面是一种特殊情况，虽然可以运行，但会得到错误的结果。</p>
<pre><code class="language-javascript">let foo = () =&gt; { a: 1 };
foo() // undefined
</code></pre>
<p>上面代码中，原始意图是返回一个对象<code>{ a: 1 }</code>，但是由于引擎认为大括号是代码块，所以执行了一行语句<code>a: 1</code>。这时，<code>a</code>可以被解释为语句的标签，因此实际执行的语句是<code>1;</code>，然后函数就结束了，没有返回值。</p>
<p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p>
<pre><code class="language-javascript">let fn = () =&gt; void doesNotReturn();
</code></pre>
<p>箭头函数可以与变量解构结合使用。</p>
<pre><code class="language-javascript">const full = ({ first, last }) =&gt; first + ' ' + last;

// 等同于
function full(person) {
  return person.first + ' ' + person.last;
}
</code></pre>
<p>箭头函数使得表达更加简洁。</p>
<pre><code class="language-javascript">const isEven = n =&gt; n % 2 === 0;
const square = n =&gt; n * n;
</code></pre>
<p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p>
<p>箭头函数的一个用处是简化回调函数。</p>
<pre><code class="language-javascript">// 正常函数写法
[1,2,3].map(function (x) {
  return x * x;
});

// 箭头函数写法
[1,2,3].map(x =&gt; x * x);
</code></pre>
<p>另一个例子是</p>
<pre><code class="language-javascript">// 正常函数写法
var result = values.sort(function (a, b) {
  return a - b;
});

// 箭头函数写法
var result = values.sort((a, b) =&gt; a - b);
</code></pre>
<p>下面是 rest 参数与箭头函数结合的例子。</p>
<pre><code class="language-javascript">const numbers = (...nums) =&gt; nums;

numbers(1, 2, 3, 4, 5)
// [1,2,3,4,5]

const headAndTail = (head, ...tail) =&gt; [head, tail];

headAndTail(1, 2, 3, 4, 5)
// [1,[2,3,4,5]]
</code></pre>
<h2 id="使用注意点">使用注意点</h2>
<p>箭头函数有几个使用注意点。</p>
<p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p>
<p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p>
<p>上面四点中，第一点尤其值得注意。<code>this</code>对象的指向是可变的，但是在箭头函数中，它是固定的。</p>
<pre><code class="language-javascript">function foo() {
  setTimeout(() =&gt; {
    console.log('id:', this.id);
  }, 100);
}

var id = 21;

foo.call({ id: 42 });
// id: 42
</code></pre>
<p>上面代码中，<code>setTimeout()</code>的参数是一个箭头函数，这个箭头函数的定义生效是在<code>foo</code>函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出<code>21</code>。但是，箭头函数导致<code>this</code>总是指向函数定义生效时所在的对象（本例是<code>{id: 42}</code>），所以打印出来的是<code>42</code>。</p>
<p>箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。</p>
<pre><code class="language-javascript">function Timer() {
  this.s1 = 0;
  this.s2 = 0;
  // 箭头函数
  setInterval(() =&gt; this.s1++, 1000);
  // 普通函数
  setInterval(function () {
    this.s2++;
  }, 1000);
}

var timer = new Timer();

setTimeout(() =&gt; console.log('s1: ', timer.s1), 3100);
setTimeout(() =&gt; console.log('s2: ', timer.s2), 3100);
// s1: 3
// s2: 0
</code></pre>
<p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2</code>一次都没更新。</p>
<p>箭头函数可以让<code>this</code>指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。</p>
<pre><code class="language-javascript">var handler = {
  id: '123456',

  init: function() {
    document.addEventListener('click',
      event =&gt; this.doSomething(event.type), false);
  },

  doSomething: function(type) {
    console.log('Handling ' + type  + ' for ' + this.id);
  }
};
</code></pre>
<p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。</p>
<p><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。</p>
<p>所以，箭头函数转成 ES5 的代码如下。</p>
<pre><code class="language-javascript">// ES6
function foo() {
  setTimeout(() =&gt; {
    console.log('id:', this.id);
  }, 100);
}

// ES5
function foo() {
  var _this = this;

  setTimeout(function () {
    console.log('id:', _this.id);
  }, 100);
}
</code></pre>
<p>上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的<code>this</code>，而是引用外层的<code>this</code>。</p>
<p>请问下面的代码之中有几个<code>this</code>？</p>
<pre><code class="language-javascript">function foo() {
  return () =&gt; {
    return () =&gt; {
      return () =&gt; {
        console.log('id:', this.id);
      };
    };
  };
}

var f = foo.call({id: 1});

var t1 = f.call({id: 2})()(); // id: 1
var t2 = f().call({id: 3})(); // id: 1
var t3 = f()().call({id: 4}); // id: 1
</code></pre>
<p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以<code>t1</code>、<code>t2</code>、<code>t3</code>都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的<code>this</code>其实都是最外层<code>foo</code>函数的<code>this</code>。</p>
<p>除了<code>this</code>，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>。</p>
<pre><code class="language-javascript">function foo() {
  setTimeout(() =&gt; {
    console.log('args:', arguments);
  }, 100);
}

foo(2, 4, 6, 8)
// args: [2, 4, 6, 8]
</code></pre>
<p>上面代码中，箭头函数内部的变量<code>arguments</code>，其实是函数<code>foo</code>的<code>arguments</code>变量。</p>
<p>另外，由于箭头函数没有自己的<code>this</code>，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变<code>this</code>的指向。</p>
<pre><code class="language-javascript">(function() {
  return [
    (() =&gt; this.x).bind({ x: 'inner' })()
  ];
}).call({ x: 'outer' });
// ['outer']
</code></pre>
<p>上面代码中，箭头函数没有自己的<code>this</code>，所以<code>bind</code>方法无效，内部的<code>this</code>指向外部的<code>this</code>。</p>
<p>长期以来，JavaScript 语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。箭头函数”绑定”<code>this</code>，很大程度上解决了这个困扰。</p>
<h2 id="不适用场合">不适用场合</h2>
<p>由于箭头函数使得<code>this</code>从“动态”变成“静态”，下面两个场合不应该使用箭头函数。</p>
<p>第一个场合是定义对象的方法，且该方法内部包括<code>this</code>。</p>
<pre><code class="language-javascript">const cat = {
  lives: 9,
  jumps: () =&gt; {
    this.lives--;
  }
}
</code></pre>
<p>上面代码中，<code>cat.jumps()</code>方法是一个箭头函数，这是错误的。调用<code>cat.jumps()</code>时，如果是普通函数，该方法内部的<code>this</code>指向<code>cat</code>；如果写成上面那样的箭头函数，使得<code>this</code>指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致<code>jumps</code>箭头函数定义时的作用域就是全局作用域。</p>
<p>再看一个例子。</p>
<pre><code class="language-javascript">globalThis.s = 21;

const obj = {
  s: 42,
  m: () =&gt; console.log(this.s)
};

obj.m() // 21
</code></pre>
<p>上面例子中，<code>obj.m()</code>使用箭头函数定义。JavaScript 引擎的处理方法是，先在全局空间生成这个箭头函数，然后赋值给<code>obj.m</code>，这导致箭头函数内部的<code>this</code>指向全局对象，所以<code>obj.m()</code>输出的是全局空间的<code>21</code>，而不是对象内部的<code>42</code>。上面的代码实际上等同于下面的代码。</p>
<pre><code class="language-javascript">globalThis.s = 21;
globalThis.m = () =&gt; console.log(this.s);

const obj = {
  s: 42,
  m: globalThis.m
};

obj.m() // 21
</code></pre>
<p>由于上面这个原因，对象的属性建议使用传统的写法定义，不要用箭头函数定义。</p>
<p>第二个场合是需要动态<code>this</code>的时候，也不应使用箭头函数。</p>
<pre><code class="language-javascript">var button = document.getElementById('press');
button.addEventListener('click', () =&gt; {
  this.classList.toggle('on');
});
</code></pre>
<p>上面代码运行时，点击按钮会报错，因为<code>button</code>的监听函数是一个箭头函数，导致里面的<code>this</code>就是全局对象。如果改成普通函数，<code>this</code>就会动态指向被点击的按钮对象。</p>
<p>另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="嵌套的箭头函数">嵌套的箭头函数</h2>
<p>箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。</p>
<pre><code class="language-javascript">function insert(value) {
  return {into: function (array) {
    return {after: function (afterValue) {
      array.splice(array.indexOf(afterValue) + 1, 0, value);
      return array;
    }};
  }};
}

insert(2).into([1, 3]).after(1); //[1, 2, 3]
</code></pre>
<p>上面这个函数，可以使用箭头函数改写。</p>
<pre><code class="language-javascript">let insert = (value) =&gt; ({into: (array) =&gt; ({after: (afterValue) =&gt; {
  array.splice(array.indexOf(afterValue) + 1, 0, value);
  return array;
}})});

insert(2).into([1, 3]).after(1); //[1, 2, 3]
</code></pre>
<p>下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。</p>
<pre><code class="language-javascript">const pipeline = (...funcs) =&gt;
  val =&gt; funcs.reduce((a, b) =&gt; b(a), val);

const plus1 = a =&gt; a + 1;
const mult2 = a =&gt; a * 2;
const addThenMult = pipeline(plus1, mult2);

addThenMult(5)
// 12
</code></pre>
<p>如果觉得上面的写法可读性比较差，也可以采用下面的写法。</p>
<pre><code class="language-javascript">const plus1 = a =&gt; a + 1;
const mult2 = a =&gt; a * 2;

mult2(plus1(5))
// 12
</code></pre>
<p>箭头函数还有一个功能，就是可以很方便地改写 λ 演算。</p>
<pre><code class="language-javascript">// λ演算的写法
fix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))

// ES6的写法
var fix = f =&gt; (x =&gt; f(v =&gt; x(x)(v)))
               (x =&gt; f(v =&gt; x(x)(v)));
</code></pre>
<p>上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 ES6 作为替代工具，探索计算机科学。</p>
<h2 id="参考">参考</h2>
<p>具体参考:<a href="https://es6.ruanyifeng.com/#docs/function">https://es6.ruanyifeng.com/#docs/function</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive分析函数grouping sets]]></title>
        <id>https://dingdingtao.github.io/post/hive-fen-xi-han-shu-grouping-sets/</id>
        <link href="https://dingdingtao.github.io/post/hive-fen-xi-han-shu-grouping-sets/">
        </link>
        <updated>2021-03-31T04:12:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="grouping-sets">grouping sets</h2>
<p>在一个group by 的聚合查询中，根据不同的维度进行组合，我们可以选择性的去对维度聚合，也可以聚合所有维度，当维度上卷聚合时，维度值为 null，可用<code>ifnull</code>函数去赋值，得到一个新的汇总维度，其中<code>grouping__id</code>代表一个分组的唯一id。</p>
<h2 id="cube">cube</h2>
<p>在一个group by 的聚合查询中，根据所有维度组合进行聚合</p>
<h2 id="rollup">rollup</h2>
<p>是cube 的一个子集，以左边的维度为主，进行聚合</p>
<p><code>grouping__id必须与grouping sets一起使用</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群聊机器人]]></title>
        <id>https://dingdingtao.github.io/post/qun-liao-ji-qi-ren/</id>
        <link href="https://dingdingtao.github.io/post/qun-liao-ji-qi-ren/">
        </link>
        <updated>2021-03-31T04:06:29.000Z</updated>
        <summary type="html"><![CDATA[<center>
企业微信、钉钉开发文档，关于群聊机器人开发相关内容
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
企业微信、钉钉开发文档，关于群聊机器人开发相关内容
</center>
<!-- more -->
<p><a href="https://work.weixin.qq.com/help?doc_id=13376">企业微信群聊机器人文档</a></p>
<p><a href="https://developers.dingtalk.com/document/app/document-upgrade-notice#/serverapi3/iydd5h">钉钉群聊机器人文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive逻辑运算]]></title>
        <id>https://dingdingtao.github.io/post/hive-luo-ji-yun-suan/</id>
        <link href="https://dingdingtao.github.io/post/hive-luo-ji-yun-suan/">
        </link>
        <updated>2021-03-19T04:36:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="逻辑与">逻辑与</h2>
<p><strong>语法</strong>: A AND B<br>
<strong>操作类型</strong>：boolean<br>
<strong>说明</strong>：如果A和B均为TRUE，则为TRUE；否则为FALSE。如果A为NULL或B为NULL，则为NULL</p>
<h2 id="逻辑或">逻辑或</h2>
<p><strong>语法</strong>: A OR B<br>
<strong>操作类型</strong>：boolean<br>
<strong>说明</strong>：如果A为TRUE，或者B为TRUE，或者A和B均为TRUE，则为TRUE；否则为FALSE</p>
<h2 id="逻辑非">逻辑非</h2>
<p><strong>语法</strong>: NOT A<br>
<strong>操作类型</strong>：boolean<br>
<strong>说明</strong>：如果A为FALSE，或者A为NULL，则为TRUE；否则为FALSE</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive数值运算]]></title>
        <id>https://dingdingtao.github.io/post/hive-shu-zhi-yun-suan/</id>
        <link href="https://dingdingtao.github.io/post/hive-shu-zhi-yun-suan/">
        </link>
        <updated>2021-03-19T04:14:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="加法操作">加法操作</h2>
<p><strong>语法</strong>: A + B</p>
<pre><code class="language-sql">select 1 + 2 from table

&gt; 3
</code></pre>
<p><strong>说明</strong>: 返回A与B相加的结果。<code>int + int 一般结果为int类型，而int + double 一般结果为double类型</code></p>
<h2 id="减法操作">减法操作</h2>
<p><strong>语法</strong>: A - B</p>
<pre><code class="language-sql">select 10 - 2 from table

&gt; 8
</code></pre>
<p><strong>说明</strong>: 返回A与B相减的结果。<code>int – int 一般结果为int类型，而int – double 一般结果为double类型</code></p>
<h2 id="乘法操作">乘法操作</h2>
<p><strong>语法</strong>: A * B</p>
<pre><code class="language-sql">select 10 * 2 from table

&gt; 200
</code></pre>
<p><strong>说明</strong>: 返回A与B相乘的结果。<code>如果A乘以B的结果超过默认结果类型的数值范围，则需要通过cast将结果转换成范围更大的数值类型</code></p>
<h2 id="除法操作">除法操作</h2>
<p><strong>语法</strong>: A / B</p>
<pre><code class="language-sql">select 10 / 2 from table

&gt; 5.0
</code></pre>
<p><strong>说明</strong>: 返回A除以B的结果。结果的数值类型为double。<code>hive 中最高精度的数据类型是 double, 只精确到小数点后 16 位，在做除法运算的时候要特别注意</code></p>
<h2 id="取余操作">取余操作</h2>
<p><strong>语法</strong>: A % B</p>
<pre><code class="language-sql">select 10 % 4 from table

&gt; 2
</code></pre>
<p><strong>说明</strong>: 返回A除以B的余数。结果的数值类型等于A的类型和B的类型的最小父类型。<code>最好通过 round 指定精度</code></p>
<h2 id="位与操作">位与操作</h2>
<p><strong>语法</strong>: A &amp; B</p>
<pre><code class="language-sql">select 6 &amp; 4 from table

&gt; 4
</code></pre>
<p><strong>说明</strong>: 返回A和B按位进行与操作的结果，结果的数值类型等于A的类型和B的类型的最小父类型。</p>
<h2 id="位或操作">位或操作</h2>
<p><strong>语法</strong>: A | B</p>
<pre><code class="language-sql">select 6 | 8 from table

&gt; 14
</code></pre>
<p><strong>说明</strong>: 返回A和B按位进行或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型。</p>
<h2 id="位异或操作">位异或操作</h2>
<p><strong>语法</strong>: A ^ B</p>
<pre><code class="language-sql">select 4 ^ 8 from table

&gt; 12
</code></pre>
<p><strong>说明</strong>: 返回A和B按位进行异或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型。</p>
<h2 id="位取反操作">位取反操作</h2>
<p><strong>语法</strong>: ~A</p>
<pre><code class="language-sql">select ~6 from table

&gt; -7
</code></pre>
<p><strong>说明</strong>: 返回A按位取反操作的结果。结果的数值类型等于A的类型。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue语法模板]]></title>
        <id>https://dingdingtao.github.io/post/vue-yu-fa-mo-ban/</id>
        <link href="https://dingdingtao.github.io/post/vue-yu-fa-mo-ban/">
        </link>
        <updated>2021-03-11T02:12:19.000Z</updated>
        <summary type="html"><![CDATA[<center>
Vue常用指令
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
Vue常用指令
</center>
<!-- more -->
<h2 id="常用指令">常用指令</h2>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>v-model</td>
<td>用来在表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值</td>
</tr>
<tr>
<td>v-on</td>
<td>用于监听 DOM 事件</td>
</tr>
<tr>
<td>v-bind</td>
<td>用来响应地更新 HTML 属性</td>
</tr>
<tr>
<td>v-if</td>
<td>根据表达式的值(true 或 false )来决定是否插入元素（后面可跟v-else 、v-else-if ）</td>
</tr>
<tr>
<td>v-html</td>
<td>用于输出 html 代码</td>
</tr>
<tr>
<td>v-show</td>
<td>根据条件展示元素</td>
</tr>
<tr>
<td>v-for</td>
<td>需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名</td>
</tr>
</tbody>
</table>
<h3 id="修饰符">修饰符</h3>
<p>修饰符是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用 <strong>event.preventDefault()</strong>：</p>
<pre><code class="language-html">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;
</code></pre>
<h3 id="过滤器">过滤器</h3>
<p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由&quot;管道符&quot;指示, 格式如下：</p>
<pre><code class="language-html">&lt;!-- 在两个大括号中 --&gt;
{{ message | capitalize }}
&lt;!-- 在 v-bind 指令中 --&gt;
&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;
</code></pre>
<p>过滤器函数接受表达式的值作为第一个参数。<br>
以下实例对输入的字符串第一个字母转为大写：</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
  {{ message | capitalize }}
&lt;/div&gt;
    
&lt;script&gt;
new Vue({
  el: '#app',
  data: {
    message: 'runoob'
  },
  filters: {
    capitalize: function (value) {
      if (!value) return ''
      value = value.toString()
      return value.charAt(0).toUpperCase() + value.slice(1)
    }
  }
})
&lt;/script&gt;
</code></pre>
<p><strong>过滤器可以串联</strong>：</p>
<pre><code class="language-html">{{ message | filterA | filterB }}
</code></pre>
<p>过滤器是 JavaScript 函数，因此<strong>可以接受参数</strong>：</p>
<pre><code class="language-html">{{ message | filterA('arg1', arg2) }}
</code></pre>
<p>这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p>
<h3 id="缩写">缩写</h3>
<p>Vue.js 为两个最为常用的指令提供了特别的缩写：<br>
<strong>v-bind 缩写</strong></p>
<pre><code class="language-html">&lt;!-- 完整语法 --&gt;
&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;
&lt;!-- 缩写 --&gt;
&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;
</code></pre>
<p><strong>v-on 缩写</strong></p>
<pre><code class="language-html">&lt;!-- 完整语法 --&gt;
&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;
&lt;!-- 缩写 --&gt;
&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;
</code></pre>
<h2 id="参考">参考</h2>
<p><a href="https://www.runoob.com/vue2/vue-template-syntax.html">Vue.js 模板语法</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript常用正则]]></title>
        <id>https://dingdingtao.github.io/post/javascript-chang-yong-zheng-ze/</id>
        <link href="https://dingdingtao.github.io/post/javascript-chang-yong-zheng-ze/">
        </link>
        <updated>2021-03-10T08:28:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="url">URL</h3>
<pre><code class="language-javascript">let url_reg = /(http[s]?:\/\/)?[^\s([&quot;&lt;,&gt;]*\.[^\s[&quot;,&gt;&lt;]*/
</code></pre>
<h3 id="纯数字">纯数字</h3>
<pre><code class="language-javascript">let num_reg = /^[0-9]*$/
</code></pre>
<h3 id="邮箱">邮箱</h3>
<pre><code class="language-javascript">let mail_reg = /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/
</code></pre>
<h3 id="中文与全角符号">中文与全角符号</h3>
<pre><code class="language-javascript">let chinese_reg = /[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]/
</code></pre>
<h3 id="身份证不验证是否合法">身份证(不验证是否合法)</h3>
<pre><code class="language-javascript">let idcard_reg = /\d{15}(\d\d[0-9xX])?/
</code></pre>
<h3 id="仅包含英文字母的字符串">仅包含英文字母的字符串</h3>
<pre><code class="language-javascript">let eng_reg = /^[A-Za-z]+$/
</code></pre>
<h3 id="正整数">正整数</h3>
<pre><code class="language-javascript">let digital_reg = /^\d+$/
</code></pre>
<h3 id="负整数">负整数</h3>
<pre><code class="language-javascript">let digital_reg = /^((-\d+)|(0+))$/
</code></pre>
<h3 id="数字正负数-小数">数字(正负数、小数)</h3>
<pre><code class="language-javascript">let digital_reg = /^(\-|\+)?\d+(\.\d+)?$/
</code></pre>
<h3 id="ipv4">IPv4</h3>
<pre><code class="language-javascript">let ipv4_reg = /^((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}$/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven-POM标签大全详解]]></title>
        <id>https://dingdingtao.github.io/post/maven-pom-biao-qian-da-quan-xiang-jie/</id>
        <link href="https://dingdingtao.github.io/post/maven-pom-biao-qian-da-quan-xiang-jie/">
        </link>
        <updated>2021-03-03T06:39:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-XML">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 
        version。 --&gt;
    &lt;parent&gt;
        &lt;!--被继承的父项目的构件标识符 --&gt;
        &lt;artifactId /&gt;
        &lt;!--被继承的父项目的全球唯一标识符 --&gt;
        &lt;groupId /&gt;
        &lt;!--被继承的父项目的版本 --&gt;
        &lt;version /&gt;
        &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 
            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;
        &lt;relativePath /&gt;
    &lt;/parent&gt;
    &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;
    &lt;groupId&gt;asia.banseon&lt;/groupId&gt;
    &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 
        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;
    &lt;artifactId&gt;banseon-maven2&lt;/artifactId&gt;
    &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!--项目的名称, Maven产生的文档用 --&gt;
    &lt;name&gt;banseon-maven&lt;/name&gt;
    &lt;!--项目主页的URL, Maven产生的文档用 --&gt;
    &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;
    &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 
        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;
    &lt;description&gt;A maven project to study maven.&lt;/description&gt;
    &lt;!--描述了这个项目构建环境中的前提条件。 --&gt;
    &lt;prerequisites&gt;
        &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;
        &lt;maven /&gt;
    &lt;/prerequisites&gt;
    &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;
    &lt;issueManagement&gt;
        &lt;!--问题管理系统（例如jira）的名字， --&gt;
        &lt;system&gt;jira&lt;/system&gt;
        &lt;!--该项目使用的问题管理系统的URL --&gt;
        &lt;url&gt;http://jira.baidu.com/banseon&lt;/url&gt;
    &lt;/issueManagement&gt;
    &lt;!--项目持续集成信息 --&gt;
    &lt;ciManagement&gt;
        &lt;!--持续集成系统的名字，例如continuum --&gt;
        &lt;system /&gt;
        &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;
        &lt;url /&gt;
        &lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;
        &lt;notifiers&gt;
            &lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;
            &lt;notifier&gt;
                &lt;!--传送通知的途径 --&gt;
                &lt;type /&gt;
                &lt;!--发生错误时是否通知 --&gt;
                &lt;sendOnError /&gt;
                &lt;!--构建失败时是否通知 --&gt;
                &lt;sendOnFailure /&gt;
                &lt;!--构建成功时是否通知 --&gt;
                &lt;sendOnSuccess /&gt;
                &lt;!--发生警告时是否通知 --&gt;
                &lt;sendOnWarning /&gt;
                &lt;!--不赞成使用。通知发送到哪里 --&gt;
                &lt;address /&gt;
                &lt;!--扩展配置项 --&gt;
                &lt;configuration /&gt;
            &lt;/notifier&gt;
        &lt;/notifiers&gt;
    &lt;/ciManagement&gt;
    &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;
    &lt;inceptionYear /&gt;
    &lt;!--项目相关邮件列表信息 --&gt;
    &lt;mailingLists&gt;
        &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;
        &lt;mailingList&gt;
            &lt;!--邮件的名称 --&gt;
            &lt;name&gt;Demo&lt;/name&gt;
            &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;post&gt;banseon@126.com&lt;/post&gt;
            &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;subscribe&gt;banseon@126.com&lt;/subscribe&gt;
            &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;unsubscribe&gt;banseon@126.com&lt;/unsubscribe&gt;
            &lt;!--你可以浏览邮件信息的URL --&gt;
            &lt;archive&gt;http:/hi.baidu.com/banseon/demo/dev/&lt;/archive&gt;
        &lt;/mailingList&gt;
    &lt;/mailingLists&gt;
    &lt;!--项目开发者列表 --&gt;
    &lt;developers&gt;
        &lt;!--某个项目开发者的信息 --&gt;
        &lt;developer&gt;
            &lt;!--SCM里项目开发者的唯一标识符 --&gt;
            &lt;id&gt;HELLO WORLD&lt;/id&gt;
            &lt;!--项目开发者的全名 --&gt;
            &lt;name&gt;banseon&lt;/name&gt;
            &lt;!--项目开发者的email --&gt;
            &lt;email&gt;banseon@126.com&lt;/email&gt;
            &lt;!--项目开发者的主页的URL --&gt;
            &lt;url /&gt;
            &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;
            &lt;roles&gt;
                &lt;role&gt;Project Manager&lt;/role&gt;
                &lt;role&gt;Architect&lt;/role&gt;
            &lt;/roles&gt;
            &lt;!--项目开发者所属组织 --&gt;
            &lt;organization&gt;demo&lt;/organization&gt;
            &lt;!--项目开发者所属组织的URL --&gt;
            &lt;organizationUrl&gt;http://hi.baidu.com/banseon&lt;/organizationUrl&gt;
            &lt;!--项目开发者属性，如即时消息如何处理等 --&gt;
            &lt;properties&gt;
                &lt;dept&gt;No&lt;/dept&gt;
            &lt;/properties&gt;
            &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;
            &lt;timezone&gt;-5&lt;/timezone&gt;
        &lt;/developer&gt;
    &lt;/developers&gt;
    &lt;!--项目的其他贡献者列表 --&gt;
    &lt;contributors&gt;
        &lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;
        &lt;contributor&gt;
            &lt;name /&gt;
            &lt;email /&gt;
            &lt;url /&gt;
            &lt;organization /&gt;
            &lt;organizationUrl /&gt;
            &lt;roles /&gt;
            &lt;timezone /&gt;
            &lt;properties /&gt;
        &lt;/contributor&gt;
    &lt;/contributors&gt;
    &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;
    &lt;licenses&gt;
        &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;
        &lt;license&gt;
            &lt;!--license用于法律上的名称 --&gt;
            &lt;name&gt;Apache 2&lt;/name&gt;
            &lt;!--官方的license正文页面的URL --&gt;
            &lt;url&gt;http://www.baidu.com/banseon/LICENSE-2.0.txt&lt;/url&gt;
            &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;
            &lt;distribution&gt;repo&lt;/distribution&gt;
            &lt;!--关于license的补充信息 --&gt;
            &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;
        &lt;/license&gt;
    &lt;/licenses&gt;
    &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;
    &lt;scm&gt;
        &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;
        &lt;connection&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
        &lt;/connection&gt;
        &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;
        &lt;developerConnection&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
        &lt;/developerConnection&gt;
        &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;
        &lt;tag /&gt;
        &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;
        &lt;url&gt;http://svn.baidu.com/banseon&lt;/url&gt;
    &lt;/scm&gt;
    &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;
    &lt;organization&gt;
        &lt;!--组织的全名 --&gt;
        &lt;name&gt;demo&lt;/name&gt;
        &lt;!--组织主页的URL --&gt;
        &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;
    &lt;/organization&gt;
    &lt;!--构建项目需要的信息 --&gt;
    &lt;build&gt;
        &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;
        &lt;sourceDirectory /&gt;
        &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;
        &lt;scriptSourceDirectory /&gt;
        &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;
        &lt;testSourceDirectory /&gt;
        &lt;!--被编译过的应用程序class文件存放的目录。 --&gt;
        &lt;outputDirectory /&gt;
        &lt;!--被编译过的测试class文件存放的目录。 --&gt;
        &lt;testOutputDirectory /&gt;
        &lt;!--使用来自该项目的一系列构建扩展 --&gt;
        &lt;extensions&gt;
            &lt;!--描述使用到的构建扩展。 --&gt;
            &lt;extension&gt;
                &lt;!--构建扩展的groupId --&gt;
                &lt;groupId /&gt;
                &lt;!--构建扩展的artifactId --&gt;
                &lt;artifactId /&gt;
                &lt;!--构建扩展的版本 --&gt;
                &lt;version /&gt;
            &lt;/extension&gt;
        &lt;/extensions&gt;
        &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;
        &lt;defaultGoal /&gt;
        &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;
        &lt;resources&gt;
            &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;
            &lt;resource&gt;
                &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 
                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;
                &lt;targetPath /&gt;
                &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;
                &lt;filtering /&gt;
                &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;
                &lt;directory /&gt;
                &lt;!--包含的模式列表，例如**/*.xml. --&gt;
                &lt;includes /&gt;
                &lt;!--排除的模式列表，例如**/*.xml --&gt;
                &lt;excludes /&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
        &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;
        &lt;testResources&gt;
            &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;
            &lt;testResource&gt;
                &lt;targetPath /&gt;
                &lt;filtering /&gt;
                &lt;directory /&gt;
                &lt;includes /&gt;
                &lt;excludes /&gt;
            &lt;/testResource&gt;
        &lt;/testResources&gt;
        &lt;!--构建产生的所有文件存放的目录 --&gt;
        &lt;directory /&gt;
        &lt;!--产生的构件的文件名，默认值是${artifactId}-${version}。 --&gt;
        &lt;finalName /&gt;
        &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;
        &lt;filters /&gt;
        &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;
        &lt;pluginManagement&gt;
            &lt;!--使用的插件列表 。 --&gt;
            &lt;plugins&gt;
                &lt;!--plugin元素包含描述插件所需要的信息。 --&gt;
                &lt;plugin&gt;
                    &lt;!--插件在仓库里的group ID --&gt;
                    &lt;groupId /&gt;
                    &lt;!--插件在仓库里的artifact ID --&gt;
                    &lt;artifactId /&gt;
                    &lt;!--被使用的插件的版本（或版本范围） --&gt;
                    &lt;version /&gt;
                    &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;
                    &lt;extensions /&gt;
                    &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;
                    &lt;executions&gt;
                        &lt;!--execution元素包含了插件执行需要的信息 --&gt;
                        &lt;execution&gt;
                            &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;
                            &lt;id /&gt;
                            &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;
                            &lt;phase /&gt;
                            &lt;!--配置的执行目标 --&gt;
                            &lt;goals /&gt;
                            &lt;!--配置是否被传播到子POM --&gt;
                            &lt;inherited /&gt;
                            &lt;!--作为DOM对象的配置 --&gt;
                            &lt;configuration /&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;!--项目引入插件所需要的额外依赖 --&gt;
                    &lt;dependencies&gt;
                        &lt;!--参见dependencies/dependency元素 --&gt;
                        &lt;dependency&gt;
                            ......
                        &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;!--任何配置是否被传播到子项目 --&gt;
                    &lt;inherited /&gt;
                    &lt;!--作为DOM对象的配置 --&gt;
                    &lt;configuration /&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
        &lt;!--使用的插件列表 --&gt;
        &lt;plugins&gt;
            &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
            &lt;plugin&gt;
                &lt;groupId /&gt;
                &lt;artifactId /&gt;
                &lt;version /&gt;
                &lt;extensions /&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id /&gt;
                        &lt;phase /&gt;
                        &lt;goals /&gt;
                        &lt;inherited /&gt;
                        &lt;configuration /&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;dependencies&gt;
                    &lt;!--参见dependencies/dependency元素 --&gt;
                    &lt;dependency&gt;
                        ......
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
                &lt;goals /&gt;
                &lt;inherited /&gt;
                &lt;configuration /&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;
    &lt;profiles&gt;
        &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;
        &lt;profile&gt;
            &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;
            &lt;id /&gt;
            &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;
            &lt;activation&gt;
                &lt;!--profile默认是否激活的标志 --&gt;
                &lt;activeByDefault /&gt;
                &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;
                &lt;jdk /&gt;
                &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;
                &lt;os&gt;
                    &lt;!--激活profile的操作系统的名字 --&gt;
                    &lt;name&gt;Windows XP&lt;/name&gt;
                    &lt;!--激活profile的操作系统所属家族(如 'windows') --&gt;
                    &lt;family&gt;Windows&lt;/family&gt;
                    &lt;!--激活profile的操作系统体系结构 --&gt;
                    &lt;arch&gt;x86&lt;/arch&gt;
                    &lt;!--激活profile的操作系统版本 --&gt;
                    &lt;version&gt;5.1.2600&lt;/version&gt;
                &lt;/os&gt;
                &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;
                &lt;property&gt;
                    &lt;!--激活profile的属性的名称 --&gt;
                    &lt;name&gt;mavenVersion&lt;/name&gt;
                    &lt;!--激活profile的属性的值 --&gt;
                    &lt;value&gt;2.0.3&lt;/value&gt;
                &lt;/property&gt;
                &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;
                &lt;file&gt;
                    &lt;!--如果指定的文件存在，则激活profile。 --&gt;
                    &lt;exists&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    &lt;/exists&gt;
                    &lt;!--如果指定的文件不存在，则激活profile。 --&gt;
                    &lt;missing&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    &lt;/missing&gt;
                &lt;/file&gt;
            &lt;/activation&gt;
            &lt;!--构建项目所需要的信息。参见build元素 --&gt;
            &lt;build&gt;
                &lt;defaultGoal /&gt;
                &lt;resources&gt;
                    &lt;resource&gt;
                        &lt;targetPath /&gt;
                        &lt;filtering /&gt;
                        &lt;directory /&gt;
                        &lt;includes /&gt;
                        &lt;excludes /&gt;
                    &lt;/resource&gt;
                &lt;/resources&gt;
                &lt;testResources&gt;
                    &lt;testResource&gt;
                        &lt;targetPath /&gt;
                        &lt;filtering /&gt;
                        &lt;directory /&gt;
                        &lt;includes /&gt;
                        &lt;excludes /&gt;
                    &lt;/testResource&gt;
                &lt;/testResources&gt;
                &lt;directory /&gt;
                &lt;finalName /&gt;
                &lt;filters /&gt;
                &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                        &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
                        &lt;plugin&gt;
                            &lt;groupId /&gt;
                            &lt;artifactId /&gt;
                            &lt;version /&gt;
                            &lt;extensions /&gt;
                            &lt;executions&gt;
                                &lt;execution&gt;
                                    &lt;id /&gt;
                                    &lt;phase /&gt;
                                    &lt;goals /&gt;
                                    &lt;inherited /&gt;
                                    &lt;configuration /&gt;
                                &lt;/execution&gt;
                            &lt;/executions&gt;
                            &lt;dependencies&gt;
                                &lt;!--参见dependencies/dependency元素 --&gt;
                                &lt;dependency&gt;
                                    ......
                                &lt;/dependency&gt;
                            &lt;/dependencies&gt;
                            &lt;goals /&gt;
                            &lt;inherited /&gt;
                            &lt;configuration /&gt;
                        &lt;/plugin&gt;
                    &lt;/plugins&gt;
                &lt;/pluginManagement&gt;
                &lt;plugins&gt;
                    &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
                    &lt;plugin&gt;
                        &lt;groupId /&gt;
                        &lt;artifactId /&gt;
                        &lt;version /&gt;
                        &lt;extensions /&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id /&gt;
                                &lt;phase /&gt;
                                &lt;goals /&gt;
                                &lt;inherited /&gt;
                                &lt;configuration /&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;dependencies&gt;
                            &lt;!--参见dependencies/dependency元素 --&gt;
                            &lt;dependency&gt;
                                ......
                            &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;goals /&gt;
                        &lt;inherited /&gt;
                        &lt;configuration /&gt;
                    &lt;/plugin&gt;
                &lt;/plugins&gt;
            &lt;/build&gt;
            &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;
            &lt;modules /&gt;
            &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;
            &lt;repositories&gt;
                &lt;!--参见repositories/repository元素 --&gt;
                &lt;repository&gt;
                    &lt;releases&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/releases&gt;
                    &lt;snapshots&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/snapshots&gt;
                    &lt;id /&gt;
                    &lt;name /&gt;
                    &lt;url /&gt;
                    &lt;layout /&gt;
                &lt;/repository&gt;
            &lt;/repositories&gt;
            &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;
            &lt;pluginRepositories&gt;
                &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;
                &lt;pluginRepository&gt;
                    &lt;releases&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/releases&gt;
                    &lt;snapshots&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/snapshots&gt;
                    &lt;id /&gt;
                    &lt;name /&gt;
                    &lt;url /&gt;
                    &lt;layout /&gt;
                &lt;/pluginRepository&gt;
            &lt;/pluginRepositories&gt;
            &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;
            &lt;dependencies&gt;
                &lt;!--参见dependencies/dependency元素 --&gt;
                &lt;dependency&gt;
                    ......
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;
            &lt;reports /&gt;
            &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;
            &lt;reporting&gt;
                ......
            &lt;/reporting&gt;
            &lt;!--参见dependencyManagement元素 --&gt;
            &lt;dependencyManagement&gt;
                &lt;dependencies&gt;
                    &lt;!--参见dependencies/dependency元素 --&gt;
                    &lt;dependency&gt;
                        ......
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/dependencyManagement&gt;
            &lt;!--参见distributionManagement元素 --&gt;
            &lt;distributionManagement&gt;
                ......
            &lt;/distributionManagement&gt;
            &lt;!--参见properties元素 --&gt;
            &lt;properties /&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
    &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;
    &lt;modules /&gt;
    &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;
    &lt;repositories&gt;
        &lt;!--包含需要连接到远程仓库的信息 --&gt;
        &lt;repository&gt;
            &lt;!--如何处理远程仓库里发布版本的下载 --&gt;
            &lt;releases&gt;
                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;
                &lt;enabled /&gt;
                &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;
                &lt;updatePolicy /&gt;
                &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;
                &lt;checksumPolicy /&gt;
            &lt;/releases&gt;
            &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 
                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;
            &lt;snapshots&gt;
                &lt;enabled /&gt;
                &lt;updatePolicy /&gt;
                &lt;checksumPolicy /&gt;
            &lt;/snapshots&gt;
            &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;
            &lt;id&gt;banseon-repository-proxy&lt;/id&gt;
            &lt;!--远程仓库名称 --&gt;
            &lt;name&gt;banseon-repository-proxy&lt;/name&gt;
            &lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;
            &lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt;
            &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 
                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;
            &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;
    &lt;pluginRepositories&gt;
        &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;
        &lt;pluginRepository&gt;
            ......
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
 
 
    &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;!--依赖的group ID --&gt;
            &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
            &lt;!--依赖的artifact ID --&gt;
            &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;
            &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 
                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;
            &lt;type&gt;jar&lt;/type&gt;
            &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 
                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;
            &lt;classifier&gt;&lt;/classifier&gt;
            &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath 
                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 
                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;
            &lt;scope&gt;test&lt;/scope&gt;
            &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 --&gt;
            &lt;systemPath&gt;&lt;/systemPath&gt;
            &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
            &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;
    &lt;reports&gt;&lt;/reports&gt;
    &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;
    &lt;reporting&gt;
        &lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;
        &lt;excludeDefaults /&gt;
        &lt;!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 --&gt;
        &lt;outputDirectory /&gt;
        &lt;!--使用的报表插件和他们的配置。 --&gt;
        &lt;plugins&gt;
            &lt;!--plugin元素包含描述报表插件需要的信息 --&gt;
            &lt;plugin&gt;
                &lt;!--报表插件在仓库里的group ID --&gt;
                &lt;groupId /&gt;
                &lt;!--报表插件在仓库里的artifact ID --&gt;
                &lt;artifactId /&gt;
                &lt;!--被使用的报表插件的版本（或版本范围） --&gt;
                &lt;version /&gt;
                &lt;!--任何配置是否被传播到子项目 --&gt;
                &lt;inherited /&gt;
                &lt;!--报表插件的配置 --&gt;
                &lt;configuration /&gt;
                &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;
                &lt;reportSets&gt;
                    &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;
                    &lt;reportSet&gt;
                        &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;
                        &lt;id /&gt;
                        &lt;!--产生报表集合时，被使用的报表的配置 --&gt;
                        &lt;configuration /&gt;
                        &lt;!--配置是否被继承到子POMs --&gt;
                        &lt;inherited /&gt;
                        &lt;!--这个集合里使用到哪些报表 --&gt;
                        &lt;reports /&gt;
                    &lt;/reportSet&gt;
                &lt;/reportSets&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/reporting&gt;
    &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact 
        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;!--参见dependencies/dependency元素 --&gt;
            &lt;dependency&gt;
                ......
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
    &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;
    &lt;distributionManagement&gt;
        &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;
        &lt;repository&gt;
            &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;
            &lt;uniqueVersion /&gt;
            &lt;id&gt;banseon-maven2&lt;/id&gt;
            &lt;name&gt;banseon maven2&lt;/name&gt;
            &lt;url&gt;file://${basedir}/target/deploy&lt;/url&gt;
            &lt;layout /&gt;
        &lt;/repository&gt;
        &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;
        &lt;snapshotRepository&gt;
            &lt;uniqueVersion /&gt;
            &lt;id&gt;banseon-maven2&lt;/id&gt;
            &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt;
            &lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt;
            &lt;layout /&gt;
        &lt;/snapshotRepository&gt;
        &lt;!--部署项目的网站需要的信息 --&gt;
        &lt;site&gt;
            &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;
            &lt;id&gt;banseon-site&lt;/id&gt;
            &lt;!--部署位置的名称 --&gt;
            &lt;name&gt;business api website&lt;/name&gt;
            &lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;
            &lt;url&gt;
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
            &lt;/url&gt;
        &lt;/site&gt;
        &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;
        &lt;downloadUrl /&gt;
        &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;
        &lt;relocation&gt;
            &lt;!--构件新的group ID --&gt;
            &lt;groupId /&gt;
            &lt;!--构件新的artifact ID --&gt;
            &lt;artifactId /&gt;
            &lt;!--构件新的版本号 --&gt;
            &lt;version /&gt;
            &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;
            &lt;message /&gt;
        &lt;/relocation&gt;
        &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 
            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;
        &lt;status /&gt;
    &lt;/distributionManagement&gt;
    &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;
    &lt;properties /&gt;
&lt;/project&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven环境配置]]></title>
        <id>https://dingdingtao.github.io/post/maven-huan-jing-pei-zhi/</id>
        <link href="https://dingdingtao.github.io/post/maven-huan-jing-pei-zhi/">
        </link>
        <updated>2021-03-03T06:31:13.000Z</updated>
        <summary type="html"><![CDATA[<center>
maven安装和环境变量配置
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
maven安装和环境变量配置
</center>
<!-- more -->
<h2 id="系统要求">系统要求</h2>
<table>
<thead>
<tr>
<th>项目</th>
<th>要求</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK</td>
<td>Maven 3.3 要求 JDK 1.7 或以上</br>Maven 3.2 要求 JDK 1.6 或以上 </br>Maven 3.0/3.1 要求 JDK 1.5 或以上</td>
</tr>
<tr>
<td>内存</td>
<td>没有最低要求</td>
</tr>
<tr>
<td>磁盘</td>
<td>Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB</td>
</tr>
<tr>
<td>操作系统</td>
<td>没有最低要求</td>
</tr>
</tbody>
</table>
<h2 id="maven-下载">Maven 下载</h2>
<p>Maven 下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<h2 id="maven-环境变量">Maven 环境变量</h2>
<ol>
<li>添加环境变量 MAVEN_HOME</li>
<li>变量值为Maven解压目录</li>
<li>编辑Path系统变量</li>
<li>添加变量值：<code>;%MAVEN_HOME%\bin</code></li>
</ol>
]]></content>
    </entry>
</feed>