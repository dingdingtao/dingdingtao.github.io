<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dingdingtao.github.io</id>
    <title>dingdingtao的个人静态网站</title>
    <updated>2021-03-04T14:43:06.335Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dingdingtao.github.io"/>
    <link rel="self" href="https://dingdingtao.github.io/atom.xml"/>
    <subtitle>快快长大</subtitle>
    <logo>https://dingdingtao.github.io/images/avatar.png</logo>
    <icon>https://dingdingtao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, dingdingtao的个人静态网站</rights>
    <entry>
        <title type="html"><![CDATA[Maven-POM标签大全详解]]></title>
        <id>https://dingdingtao.github.io/post/maven-pom-biao-qian-da-quan-xiang-jie/</id>
        <link href="https://dingdingtao.github.io/post/maven-pom-biao-qian-da-quan-xiang-jie/">
        </link>
        <updated>2021-03-03T06:39:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-XML">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 
        version。 --&gt;
    &lt;parent&gt;
        &lt;!--被继承的父项目的构件标识符 --&gt;
        &lt;artifactId /&gt;
        &lt;!--被继承的父项目的全球唯一标识符 --&gt;
        &lt;groupId /&gt;
        &lt;!--被继承的父项目的版本 --&gt;
        &lt;version /&gt;
        &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 
            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;
        &lt;relativePath /&gt;
    &lt;/parent&gt;
    &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;
    &lt;groupId&gt;asia.banseon&lt;/groupId&gt;
    &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 
        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;
    &lt;artifactId&gt;banseon-maven2&lt;/artifactId&gt;
    &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!--项目的名称, Maven产生的文档用 --&gt;
    &lt;name&gt;banseon-maven&lt;/name&gt;
    &lt;!--项目主页的URL, Maven产生的文档用 --&gt;
    &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;
    &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 
        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;
    &lt;description&gt;A maven project to study maven.&lt;/description&gt;
    &lt;!--描述了这个项目构建环境中的前提条件。 --&gt;
    &lt;prerequisites&gt;
        &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;
        &lt;maven /&gt;
    &lt;/prerequisites&gt;
    &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;
    &lt;issueManagement&gt;
        &lt;!--问题管理系统（例如jira）的名字， --&gt;
        &lt;system&gt;jira&lt;/system&gt;
        &lt;!--该项目使用的问题管理系统的URL --&gt;
        &lt;url&gt;http://jira.baidu.com/banseon&lt;/url&gt;
    &lt;/issueManagement&gt;
    &lt;!--项目持续集成信息 --&gt;
    &lt;ciManagement&gt;
        &lt;!--持续集成系统的名字，例如continuum --&gt;
        &lt;system /&gt;
        &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;
        &lt;url /&gt;
        &lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;
        &lt;notifiers&gt;
            &lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;
            &lt;notifier&gt;
                &lt;!--传送通知的途径 --&gt;
                &lt;type /&gt;
                &lt;!--发生错误时是否通知 --&gt;
                &lt;sendOnError /&gt;
                &lt;!--构建失败时是否通知 --&gt;
                &lt;sendOnFailure /&gt;
                &lt;!--构建成功时是否通知 --&gt;
                &lt;sendOnSuccess /&gt;
                &lt;!--发生警告时是否通知 --&gt;
                &lt;sendOnWarning /&gt;
                &lt;!--不赞成使用。通知发送到哪里 --&gt;
                &lt;address /&gt;
                &lt;!--扩展配置项 --&gt;
                &lt;configuration /&gt;
            &lt;/notifier&gt;
        &lt;/notifiers&gt;
    &lt;/ciManagement&gt;
    &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;
    &lt;inceptionYear /&gt;
    &lt;!--项目相关邮件列表信息 --&gt;
    &lt;mailingLists&gt;
        &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;
        &lt;mailingList&gt;
            &lt;!--邮件的名称 --&gt;
            &lt;name&gt;Demo&lt;/name&gt;
            &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;post&gt;banseon@126.com&lt;/post&gt;
            &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;subscribe&gt;banseon@126.com&lt;/subscribe&gt;
            &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;
            &lt;unsubscribe&gt;banseon@126.com&lt;/unsubscribe&gt;
            &lt;!--你可以浏览邮件信息的URL --&gt;
            &lt;archive&gt;http:/hi.baidu.com/banseon/demo/dev/&lt;/archive&gt;
        &lt;/mailingList&gt;
    &lt;/mailingLists&gt;
    &lt;!--项目开发者列表 --&gt;
    &lt;developers&gt;
        &lt;!--某个项目开发者的信息 --&gt;
        &lt;developer&gt;
            &lt;!--SCM里项目开发者的唯一标识符 --&gt;
            &lt;id&gt;HELLO WORLD&lt;/id&gt;
            &lt;!--项目开发者的全名 --&gt;
            &lt;name&gt;banseon&lt;/name&gt;
            &lt;!--项目开发者的email --&gt;
            &lt;email&gt;banseon@126.com&lt;/email&gt;
            &lt;!--项目开发者的主页的URL --&gt;
            &lt;url /&gt;
            &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;
            &lt;roles&gt;
                &lt;role&gt;Project Manager&lt;/role&gt;
                &lt;role&gt;Architect&lt;/role&gt;
            &lt;/roles&gt;
            &lt;!--项目开发者所属组织 --&gt;
            &lt;organization&gt;demo&lt;/organization&gt;
            &lt;!--项目开发者所属组织的URL --&gt;
            &lt;organizationUrl&gt;http://hi.baidu.com/banseon&lt;/organizationUrl&gt;
            &lt;!--项目开发者属性，如即时消息如何处理等 --&gt;
            &lt;properties&gt;
                &lt;dept&gt;No&lt;/dept&gt;
            &lt;/properties&gt;
            &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;
            &lt;timezone&gt;-5&lt;/timezone&gt;
        &lt;/developer&gt;
    &lt;/developers&gt;
    &lt;!--项目的其他贡献者列表 --&gt;
    &lt;contributors&gt;
        &lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;
        &lt;contributor&gt;
            &lt;name /&gt;
            &lt;email /&gt;
            &lt;url /&gt;
            &lt;organization /&gt;
            &lt;organizationUrl /&gt;
            &lt;roles /&gt;
            &lt;timezone /&gt;
            &lt;properties /&gt;
        &lt;/contributor&gt;
    &lt;/contributors&gt;
    &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;
    &lt;licenses&gt;
        &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;
        &lt;license&gt;
            &lt;!--license用于法律上的名称 --&gt;
            &lt;name&gt;Apache 2&lt;/name&gt;
            &lt;!--官方的license正文页面的URL --&gt;
            &lt;url&gt;http://www.baidu.com/banseon/LICENSE-2.0.txt&lt;/url&gt;
            &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;
            &lt;distribution&gt;repo&lt;/distribution&gt;
            &lt;!--关于license的补充信息 --&gt;
            &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;
        &lt;/license&gt;
    &lt;/licenses&gt;
    &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;
    &lt;scm&gt;
        &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;
        &lt;connection&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
        &lt;/connection&gt;
        &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;
        &lt;developerConnection&gt;
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
        &lt;/developerConnection&gt;
        &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;
        &lt;tag /&gt;
        &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;
        &lt;url&gt;http://svn.baidu.com/banseon&lt;/url&gt;
    &lt;/scm&gt;
    &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;
    &lt;organization&gt;
        &lt;!--组织的全名 --&gt;
        &lt;name&gt;demo&lt;/name&gt;
        &lt;!--组织主页的URL --&gt;
        &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;
    &lt;/organization&gt;
    &lt;!--构建项目需要的信息 --&gt;
    &lt;build&gt;
        &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;
        &lt;sourceDirectory /&gt;
        &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;
        &lt;scriptSourceDirectory /&gt;
        &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;
        &lt;testSourceDirectory /&gt;
        &lt;!--被编译过的应用程序class文件存放的目录。 --&gt;
        &lt;outputDirectory /&gt;
        &lt;!--被编译过的测试class文件存放的目录。 --&gt;
        &lt;testOutputDirectory /&gt;
        &lt;!--使用来自该项目的一系列构建扩展 --&gt;
        &lt;extensions&gt;
            &lt;!--描述使用到的构建扩展。 --&gt;
            &lt;extension&gt;
                &lt;!--构建扩展的groupId --&gt;
                &lt;groupId /&gt;
                &lt;!--构建扩展的artifactId --&gt;
                &lt;artifactId /&gt;
                &lt;!--构建扩展的版本 --&gt;
                &lt;version /&gt;
            &lt;/extension&gt;
        &lt;/extensions&gt;
        &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;
        &lt;defaultGoal /&gt;
        &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;
        &lt;resources&gt;
            &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;
            &lt;resource&gt;
                &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 
                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;
                &lt;targetPath /&gt;
                &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;
                &lt;filtering /&gt;
                &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;
                &lt;directory /&gt;
                &lt;!--包含的模式列表，例如**/*.xml. --&gt;
                &lt;includes /&gt;
                &lt;!--排除的模式列表，例如**/*.xml --&gt;
                &lt;excludes /&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
        &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;
        &lt;testResources&gt;
            &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;
            &lt;testResource&gt;
                &lt;targetPath /&gt;
                &lt;filtering /&gt;
                &lt;directory /&gt;
                &lt;includes /&gt;
                &lt;excludes /&gt;
            &lt;/testResource&gt;
        &lt;/testResources&gt;
        &lt;!--构建产生的所有文件存放的目录 --&gt;
        &lt;directory /&gt;
        &lt;!--产生的构件的文件名，默认值是${artifactId}-${version}。 --&gt;
        &lt;finalName /&gt;
        &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;
        &lt;filters /&gt;
        &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;
        &lt;pluginManagement&gt;
            &lt;!--使用的插件列表 。 --&gt;
            &lt;plugins&gt;
                &lt;!--plugin元素包含描述插件所需要的信息。 --&gt;
                &lt;plugin&gt;
                    &lt;!--插件在仓库里的group ID --&gt;
                    &lt;groupId /&gt;
                    &lt;!--插件在仓库里的artifact ID --&gt;
                    &lt;artifactId /&gt;
                    &lt;!--被使用的插件的版本（或版本范围） --&gt;
                    &lt;version /&gt;
                    &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;
                    &lt;extensions /&gt;
                    &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;
                    &lt;executions&gt;
                        &lt;!--execution元素包含了插件执行需要的信息 --&gt;
                        &lt;execution&gt;
                            &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;
                            &lt;id /&gt;
                            &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;
                            &lt;phase /&gt;
                            &lt;!--配置的执行目标 --&gt;
                            &lt;goals /&gt;
                            &lt;!--配置是否被传播到子POM --&gt;
                            &lt;inherited /&gt;
                            &lt;!--作为DOM对象的配置 --&gt;
                            &lt;configuration /&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;!--项目引入插件所需要的额外依赖 --&gt;
                    &lt;dependencies&gt;
                        &lt;!--参见dependencies/dependency元素 --&gt;
                        &lt;dependency&gt;
                            ......
                        &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;!--任何配置是否被传播到子项目 --&gt;
                    &lt;inherited /&gt;
                    &lt;!--作为DOM对象的配置 --&gt;
                    &lt;configuration /&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/pluginManagement&gt;
        &lt;!--使用的插件列表 --&gt;
        &lt;plugins&gt;
            &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
            &lt;plugin&gt;
                &lt;groupId /&gt;
                &lt;artifactId /&gt;
                &lt;version /&gt;
                &lt;extensions /&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id /&gt;
                        &lt;phase /&gt;
                        &lt;goals /&gt;
                        &lt;inherited /&gt;
                        &lt;configuration /&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;dependencies&gt;
                    &lt;!--参见dependencies/dependency元素 --&gt;
                    &lt;dependency&gt;
                        ......
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
                &lt;goals /&gt;
                &lt;inherited /&gt;
                &lt;configuration /&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;
    &lt;profiles&gt;
        &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;
        &lt;profile&gt;
            &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;
            &lt;id /&gt;
            &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;
            &lt;activation&gt;
                &lt;!--profile默认是否激活的标志 --&gt;
                &lt;activeByDefault /&gt;
                &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;
                &lt;jdk /&gt;
                &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;
                &lt;os&gt;
                    &lt;!--激活profile的操作系统的名字 --&gt;
                    &lt;name&gt;Windows XP&lt;/name&gt;
                    &lt;!--激活profile的操作系统所属家族(如 'windows') --&gt;
                    &lt;family&gt;Windows&lt;/family&gt;
                    &lt;!--激活profile的操作系统体系结构 --&gt;
                    &lt;arch&gt;x86&lt;/arch&gt;
                    &lt;!--激活profile的操作系统版本 --&gt;
                    &lt;version&gt;5.1.2600&lt;/version&gt;
                &lt;/os&gt;
                &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;
                &lt;property&gt;
                    &lt;!--激活profile的属性的名称 --&gt;
                    &lt;name&gt;mavenVersion&lt;/name&gt;
                    &lt;!--激活profile的属性的值 --&gt;
                    &lt;value&gt;2.0.3&lt;/value&gt;
                &lt;/property&gt;
                &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;
                &lt;file&gt;
                    &lt;!--如果指定的文件存在，则激活profile。 --&gt;
                    &lt;exists&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    &lt;/exists&gt;
                    &lt;!--如果指定的文件不存在，则激活profile。 --&gt;
                    &lt;missing&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    &lt;/missing&gt;
                &lt;/file&gt;
            &lt;/activation&gt;
            &lt;!--构建项目所需要的信息。参见build元素 --&gt;
            &lt;build&gt;
                &lt;defaultGoal /&gt;
                &lt;resources&gt;
                    &lt;resource&gt;
                        &lt;targetPath /&gt;
                        &lt;filtering /&gt;
                        &lt;directory /&gt;
                        &lt;includes /&gt;
                        &lt;excludes /&gt;
                    &lt;/resource&gt;
                &lt;/resources&gt;
                &lt;testResources&gt;
                    &lt;testResource&gt;
                        &lt;targetPath /&gt;
                        &lt;filtering /&gt;
                        &lt;directory /&gt;
                        &lt;includes /&gt;
                        &lt;excludes /&gt;
                    &lt;/testResource&gt;
                &lt;/testResources&gt;
                &lt;directory /&gt;
                &lt;finalName /&gt;
                &lt;filters /&gt;
                &lt;pluginManagement&gt;
                    &lt;plugins&gt;
                        &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
                        &lt;plugin&gt;
                            &lt;groupId /&gt;
                            &lt;artifactId /&gt;
                            &lt;version /&gt;
                            &lt;extensions /&gt;
                            &lt;executions&gt;
                                &lt;execution&gt;
                                    &lt;id /&gt;
                                    &lt;phase /&gt;
                                    &lt;goals /&gt;
                                    &lt;inherited /&gt;
                                    &lt;configuration /&gt;
                                &lt;/execution&gt;
                            &lt;/executions&gt;
                            &lt;dependencies&gt;
                                &lt;!--参见dependencies/dependency元素 --&gt;
                                &lt;dependency&gt;
                                    ......
                                &lt;/dependency&gt;
                            &lt;/dependencies&gt;
                            &lt;goals /&gt;
                            &lt;inherited /&gt;
                            &lt;configuration /&gt;
                        &lt;/plugin&gt;
                    &lt;/plugins&gt;
                &lt;/pluginManagement&gt;
                &lt;plugins&gt;
                    &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;
                    &lt;plugin&gt;
                        &lt;groupId /&gt;
                        &lt;artifactId /&gt;
                        &lt;version /&gt;
                        &lt;extensions /&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id /&gt;
                                &lt;phase /&gt;
                                &lt;goals /&gt;
                                &lt;inherited /&gt;
                                &lt;configuration /&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;dependencies&gt;
                            &lt;!--参见dependencies/dependency元素 --&gt;
                            &lt;dependency&gt;
                                ......
                            &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;goals /&gt;
                        &lt;inherited /&gt;
                        &lt;configuration /&gt;
                    &lt;/plugin&gt;
                &lt;/plugins&gt;
            &lt;/build&gt;
            &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;
            &lt;modules /&gt;
            &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;
            &lt;repositories&gt;
                &lt;!--参见repositories/repository元素 --&gt;
                &lt;repository&gt;
                    &lt;releases&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/releases&gt;
                    &lt;snapshots&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/snapshots&gt;
                    &lt;id /&gt;
                    &lt;name /&gt;
                    &lt;url /&gt;
                    &lt;layout /&gt;
                &lt;/repository&gt;
            &lt;/repositories&gt;
            &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;
            &lt;pluginRepositories&gt;
                &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;
                &lt;pluginRepository&gt;
                    &lt;releases&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/releases&gt;
                    &lt;snapshots&gt;
                        &lt;enabled /&gt;
                        &lt;updatePolicy /&gt;
                        &lt;checksumPolicy /&gt;
                    &lt;/snapshots&gt;
                    &lt;id /&gt;
                    &lt;name /&gt;
                    &lt;url /&gt;
                    &lt;layout /&gt;
                &lt;/pluginRepository&gt;
            &lt;/pluginRepositories&gt;
            &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;
            &lt;dependencies&gt;
                &lt;!--参见dependencies/dependency元素 --&gt;
                &lt;dependency&gt;
                    ......
                &lt;/dependency&gt;
            &lt;/dependencies&gt;
            &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;
            &lt;reports /&gt;
            &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;
            &lt;reporting&gt;
                ......
            &lt;/reporting&gt;
            &lt;!--参见dependencyManagement元素 --&gt;
            &lt;dependencyManagement&gt;
                &lt;dependencies&gt;
                    &lt;!--参见dependencies/dependency元素 --&gt;
                    &lt;dependency&gt;
                        ......
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/dependencyManagement&gt;
            &lt;!--参见distributionManagement元素 --&gt;
            &lt;distributionManagement&gt;
                ......
            &lt;/distributionManagement&gt;
            &lt;!--参见properties元素 --&gt;
            &lt;properties /&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
    &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;
    &lt;modules /&gt;
    &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;
    &lt;repositories&gt;
        &lt;!--包含需要连接到远程仓库的信息 --&gt;
        &lt;repository&gt;
            &lt;!--如何处理远程仓库里发布版本的下载 --&gt;
            &lt;releases&gt;
                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;
                &lt;enabled /&gt;
                &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;
                &lt;updatePolicy /&gt;
                &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;
                &lt;checksumPolicy /&gt;
            &lt;/releases&gt;
            &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 
                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;
            &lt;snapshots&gt;
                &lt;enabled /&gt;
                &lt;updatePolicy /&gt;
                &lt;checksumPolicy /&gt;
            &lt;/snapshots&gt;
            &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;
            &lt;id&gt;banseon-repository-proxy&lt;/id&gt;
            &lt;!--远程仓库名称 --&gt;
            &lt;name&gt;banseon-repository-proxy&lt;/name&gt;
            &lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;
            &lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt;
            &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 
                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;
            &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;
    &lt;pluginRepositories&gt;
        &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;
        &lt;pluginRepository&gt;
            ......
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
 
 
    &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;!--依赖的group ID --&gt;
            &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
            &lt;!--依赖的artifact ID --&gt;
            &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;
            &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 
                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;
            &lt;type&gt;jar&lt;/type&gt;
            &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 
                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;
            &lt;classifier&gt;&lt;/classifier&gt;
            &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath 
                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 
                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;
            &lt;scope&gt;test&lt;/scope&gt;
            &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 --&gt;
            &lt;systemPath&gt;&lt;/systemPath&gt;
            &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
            &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;
    &lt;reports&gt;&lt;/reports&gt;
    &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;
    &lt;reporting&gt;
        &lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;
        &lt;excludeDefaults /&gt;
        &lt;!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 --&gt;
        &lt;outputDirectory /&gt;
        &lt;!--使用的报表插件和他们的配置。 --&gt;
        &lt;plugins&gt;
            &lt;!--plugin元素包含描述报表插件需要的信息 --&gt;
            &lt;plugin&gt;
                &lt;!--报表插件在仓库里的group ID --&gt;
                &lt;groupId /&gt;
                &lt;!--报表插件在仓库里的artifact ID --&gt;
                &lt;artifactId /&gt;
                &lt;!--被使用的报表插件的版本（或版本范围） --&gt;
                &lt;version /&gt;
                &lt;!--任何配置是否被传播到子项目 --&gt;
                &lt;inherited /&gt;
                &lt;!--报表插件的配置 --&gt;
                &lt;configuration /&gt;
                &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;
                &lt;reportSets&gt;
                    &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;
                    &lt;reportSet&gt;
                        &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;
                        &lt;id /&gt;
                        &lt;!--产生报表集合时，被使用的报表的配置 --&gt;
                        &lt;configuration /&gt;
                        &lt;!--配置是否被继承到子POMs --&gt;
                        &lt;inherited /&gt;
                        &lt;!--这个集合里使用到哪些报表 --&gt;
                        &lt;reports /&gt;
                    &lt;/reportSet&gt;
                &lt;/reportSets&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/reporting&gt;
    &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact 
        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;!--参见dependencies/dependency元素 --&gt;
            &lt;dependency&gt;
                ......
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
    &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;
    &lt;distributionManagement&gt;
        &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;
        &lt;repository&gt;
            &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;
            &lt;uniqueVersion /&gt;
            &lt;id&gt;banseon-maven2&lt;/id&gt;
            &lt;name&gt;banseon maven2&lt;/name&gt;
            &lt;url&gt;file://${basedir}/target/deploy&lt;/url&gt;
            &lt;layout /&gt;
        &lt;/repository&gt;
        &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;
        &lt;snapshotRepository&gt;
            &lt;uniqueVersion /&gt;
            &lt;id&gt;banseon-maven2&lt;/id&gt;
            &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt;
            &lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt;
            &lt;layout /&gt;
        &lt;/snapshotRepository&gt;
        &lt;!--部署项目的网站需要的信息 --&gt;
        &lt;site&gt;
            &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;
            &lt;id&gt;banseon-site&lt;/id&gt;
            &lt;!--部署位置的名称 --&gt;
            &lt;name&gt;business api website&lt;/name&gt;
            &lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;
            &lt;url&gt;
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
            &lt;/url&gt;
        &lt;/site&gt;
        &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;
        &lt;downloadUrl /&gt;
        &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;
        &lt;relocation&gt;
            &lt;!--构件新的group ID --&gt;
            &lt;groupId /&gt;
            &lt;!--构件新的artifact ID --&gt;
            &lt;artifactId /&gt;
            &lt;!--构件新的版本号 --&gt;
            &lt;version /&gt;
            &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;
            &lt;message /&gt;
        &lt;/relocation&gt;
        &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 
            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;
        &lt;status /&gt;
    &lt;/distributionManagement&gt;
    &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;
    &lt;properties /&gt;
&lt;/project&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven环境配置]]></title>
        <id>https://dingdingtao.github.io/post/maven-huan-jing-pei-zhi/</id>
        <link href="https://dingdingtao.github.io/post/maven-huan-jing-pei-zhi/">
        </link>
        <updated>2021-03-03T06:31:13.000Z</updated>
        <summary type="html"><![CDATA[<center>
maven安装和环境变量配置
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
maven安装和环境变量配置
</center>
<!-- more -->
<h2 id="系统要求">系统要求</h2>
<table>
<thead>
<tr>
<th>项目</th>
<th>要求</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK</td>
<td>Maven 3.3 要求 JDK 1.7 或以上</br>Maven 3.2 要求 JDK 1.6 或以上 </br>Maven 3.0/3.1 要求 JDK 1.5 或以上</td>
</tr>
<tr>
<td>内存</td>
<td>没有最低要求</td>
</tr>
<tr>
<td>磁盘</td>
<td>Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB</td>
</tr>
<tr>
<td>操作系统</td>
<td>没有最低要求</td>
</tr>
</tbody>
</table>
<h2 id="maven-下载">Maven 下载</h2>
<p>Maven 下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<h2 id="maven-环境变量">Maven 环境变量</h2>
<ol>
<li>添加环境变量 MAVEN_HOME</li>
<li>变量值为Maven解压目录</li>
<li>编辑Path系统变量</li>
<li>添加变量值：<code>;%MAVEN_HOME%\bin</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas数据处理]]></title>
        <id>https://dingdingtao.github.io/post/pandas-shu-ju-chu-li/</id>
        <link href="https://dingdingtao.github.io/post/pandas-shu-ju-chu-li/">
        </link>
        <updated>2021-03-02T06:49:19.000Z</updated>
        <summary type="html"><![CDATA[<center>
pandas模块的简单使用
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
pandas模块的简单使用
</center>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code class="language-text">pip install pandas
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pymysql数据库连接]]></title>
        <id>https://dingdingtao.github.io/post/pymysql-shu-ju-ku-lian-jie/</id>
        <link href="https://dingdingtao.github.io/post/pymysql-shu-ju-ku-lian-jie/">
        </link>
        <updated>2021-03-02T06:35:56.000Z</updated>
        <summary type="html"><![CDATA[<center>
Python pymsql模块简单使用方法
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
Python pymsql模块简单使用方法
</center>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code class="language-text">pip install pymysql
</code></pre>
<h2 id="使用">使用</h2>
<p>使用方法参考<a href="https://www.jb51.net/article/92516.htm">Python中操作mysql的pymysql模块详解</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python常用模块&框架]]></title>
        <id>https://dingdingtao.github.io/post/python-kuang-jia/</id>
        <link href="https://dingdingtao.github.io/post/python-kuang-jia/">
        </link>
        <updated>2021-03-02T06:28:26.000Z</updated>
        <summary type="html"><![CDATA[<center>
整理包括Django、等框架
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
整理包括Django、等框架
</center>
<!-- more -->
<h2 id="python模块">Python模块</h2>
<table>
<thead>
<tr>
<th style="text-align:center">模块</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://dingdingtao.github.io/post/pymysql-shu-ju-ku-lian-jie/">pymysql</a></td>
<td style="text-align:center">数据库连接</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://dingdingtao.github.io/post/pandas-shu-ju-chu-li/">pandas</a></td>
<td style="text-align:center">数据处理</td>
</tr>
</tbody>
</table>
<h2 id="python框架">Python框架</h2>
<ul>
<li><a href="https://dingdingtao.github.io/tag/Python/Django">Django</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django参考]]></title>
        <id>https://dingdingtao.github.io/post/django-can-kao/</id>
        <link href="https://dingdingtao.github.io/post/django-can-kao/">
        </link>
        <updated>2021-03-02T06:19:22.000Z</updated>
        <summary type="html"><![CDATA[<center>
Django安装、创建项目、目录结构及简单使用方法
</center>
]]></summary>
        <content type="html"><![CDATA[<center>
Django安装、创建项目、目录结构及简单使用方法
</center>
<!-- more -->
<h2 id="安装django">安装django</h2>
<pre><code class="language-text">pip3 install Django==3.0.6 -i https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<h2 id="创建项目">创建项目</h2>
<pre><code class="language-text">django-admin.py startproject testdj
</code></pre>
<p><strong>目录结构</strong></p>
<pre><code class="language-text">|-- HelloWorld
|   |-- __init__.py
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   |-- wsgi.py
|-- manage.py
</code></pre>
<p><strong>目录说明</strong></p>
<ul>
<li><code>HelloWorld</code>: 项目的容器。</li>
<li><code>manage.py</code>: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>
<li><code>HelloWorld/__init__.py</code>: 一个空文件，告诉 Python 该目录是一个 Python 包。</li>
<li><code>HelloWorld/asgi.py</code>: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
<li><code>HelloWorld/settings.py</code>: 该 Django 项目的设置/配置。</li>
<li><code>HelloWorld/urls.py</code>: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站&quot;目录&quot;。</li>
<li><code>HelloWorld/wsgi.py</code>: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
</ul>
<h2 id="启动">启动</h2>
<pre><code class="language-text">python manage.py runserver [ip:port]
</code></pre>
<h2 id="视图">视图</h2>
<p>创建视图文件HelloWorld/HelloWorld/views.py</p>
<pre><code class="language-python">'''引入HttpResponse'''
from django.http import HttpResponse
 '''视图函数'''
def hello(request):
    '''
    
    '''
    return HttpResponse(&quot;Hello world ! &quot;)
</code></pre>
<h3 id="视图函数">视图函数</h3>
<p>视图层中有两个重要的对象：<br>
请求对象(request): 视图函数的固定第一参数。<br>
响应对象(HttpResponse): 视图函数返回内容。</p>
<p><strong>请求对象</strong><br>
常用的 request 属性<br>
<code>GET</code>: 数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP GET 的所有参数。<br>
有相同的键，就把所有的值放到对应的列表里。<br>
取值格式：对象.方法。<br>
get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
<pre><code class="language-python">def runoob(request):
    name = request.GET.get(&quot;name&quot;)
    return HttpResponse('姓名：{}'.format(name))
</code></pre>
<p><code>POST</code>: 数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP POST 的所有参数。<br>
常用于 form 表单，form 表单里的标签 name 属性对应参数的键，value 属性对应参数的值。<br>
取值格式： 对象.方法。<br>
get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
<pre><code class="language-python">def runoob(request):
    name = request.POST.get(&quot;name&quot;)
    return HttpResponse('姓名：{}'.format(name))
</code></pre>
<p><code>body</code>: 数据类型是二进制字节流，是原生请求体里的参数内容，在 HTTP 中用于 POST，因为 GET 没有请求体。<br>
在 HTTP 中不常用，而在处理非 HTTP 形式的报文时非常有用，例如：二进制图片、XML、Json 等。</p>
<pre><code class="language-python">def runoob(request):
    name = request.body
    print(name)
    return HttpResponse(&quot;菜鸟教程&quot;)
</code></pre>
<p><code>path</code>: 获取 URL 中的路径部分(不包括域名端口等)，数据类型是字符串。</p>
<pre><code class="language-python">def runoob(request):
    name = request.path
    print(name)
    return HttpResponse(&quot;菜鸟教程&quot;)
</code></pre>
<p><code>method</code>:  获取当前请求的方式，数据类型是字符串，且结果为大写。</p>
<pre><code class="language-python">def runoob(request):
    name = request.method
    print(name)
    return HttpResponse(&quot;菜鸟教程&quot;)
</code></pre>
<p><strong>响应对象</strong><br>
<code>HttpResponse()</code>: 返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有 html 标签，也可以渲染。</p>
<p><code>render()</code>: 返回文本，第一个参数为 request，第二个参数为字符串（页面名称），第三个参数为字典（可选参数，向页面传递的参数：键为页面参数名，值为views参数名）。</p>
<p><code>redirect()</code>：重定向，跳转新页面。参数为字符串，字符串中填写页面路径。一般用于 form 表单提交后，跳转到新页面。</p>
<h2 id="url路由">URL路由</h2>
<p>绑定 URL 与视图函数</p>
<pre><code class="language-python">'''引入url'''
from django.conf.urls import url
'''从当前目录引入views视图文件'''
from . import views
'''配置url与视图对应关系'''
urlpatterns = [
    '''
    url(请求路径, 视图函数)
    '''
    url(r'^$', views.hello),
]
</code></pre>
<p><strong>路由</strong><br>
<code>url()</code>: 普通路径和正则路径均可使用，需要自己手动添加正则首位限制符号。</p>
<pre><code class="language-python">from django.conf.urls import url # 用 url 需要引入

urlpatterns = [
    url(r'^admin/$', admin.site.urls),
    url(r'^index/$', views.index), # 普通路径
    url(r'^articles/([0-9]{4})/$', views.articles), # 正则路径
]
</code></pre>
<p><code>path()</code>：用于普通路径，不需要自己手动添加正则首位限制符号，底层已经添加。<br>
<code>re_path</code>：用于正则路径，需要自己手动添加正则首位限制符号。</p>
<pre><code class="language-python">from django.urls import re_path # 用re_path 需要引入
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', views.index), # 普通路径
    re_path(r'^articles/([0-9]{4})/$', views.articles), # 正则路径
]
</code></pre>
<p><strong>路径分组</strong></p>
<p>正则路径中的无名分组</p>
<pre><code class="language-python">urlpatterns = [
    path('admin/', admin.site.urls),
    re_path(&quot;^index/([0-9]{4})/$&quot;, views.index),
]

from django.shortcuts import HttpResponse

def index(request，year):
    print(year) # 一个形参代表路径中一个分组的内容，按顺序匹配
    return HttpResponse('菜鸟教程')

</code></pre>
<p>正则路径中的有名分组</p>
<pre><code class="language-python">urlpatterns = [
    path('admin/', admin.site.urls),
    re_path(&quot;^index/(?P[0-9]{4})/(?P[0-9]{2})/$&quot;, views.index),
]

from django.shortcuts import HttpResponse
def index(request, year, month):
    print(year,month) # 一个形参代表路径中一个分组的内容，按关键字对应匹配
    return HttpResponse('菜鸟教程')
</code></pre>
<p><strong>路由分发</strong><br>
存在问题：Django 项目里多个app目录共用一个 urls 容易造成混淆，后期维护也不方便。<br>
解决：使用路由分发（include），让每个app目录都单独拥有自己的 urls。<br>
步骤：</p>
<ol>
<li>在每个 app 目录里都创建一个 urls.py 文件。</li>
<li>在项目名称目录下的 urls 文件里，统一将路径分发给各个 app 目录。</li>
</ol>
<pre><code class="language-python">from django.contrib import admin
from django.urls import path,include # 从 django.urls 引入 include
urlpatterns = [
    path('admin/', admin.site.urls),
    path(&quot;app01/&quot;, include(&quot;app01.urls&quot;)),
    path(&quot;app02/&quot;, include(&quot;app02.urls&quot;)),
]
</code></pre>
<p><strong>反向解析</strong></p>
<p><strong>命名空间</strong></p>
<h2 id="模版">模版</h2>
<p><strong>模版目录</strong><br>
项目目录下创建templates目录,修改 TEMPLATES 中的 DIRS 为 [os.path.join(BASE_DIR, 'templates')],将模版目录修改为templates。</p>
<pre><code class="language-conf">TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # 修改位置
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
</code></pre>
<p><strong>创建模版文件</strong><br>
参考<a href="https://www.runoob.com/django/django-template.html">模版标签</a></p>
<p><strong>向模板提交数据</strong></p>
<pre><code class="language-python">from django.shortcuts import render
 
def runoob(request):
    context          = {}
    context['hello'] = 'Hello World!'
    return render(request, 'runoob.html', context)
</code></pre>
<h2 id="参考">参考</h2>
<p><a href="https://www.runoob.com/django/django-tutorial.html">django参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive时间处理函数]]></title>
        <id>https://dingdingtao.github.io/post/hive-shi-jian-chu-li-han-shu/</id>
        <link href="https://dingdingtao.github.io/post/hive-shi-jian-chu-li-han-shu/">
        </link>
        <updated>2021-03-02T03:47:20.000Z</updated>
        <summary type="html"><![CDATA[<center>常用的hive时间处理函数</center>
]]></summary>
        <content type="html"><![CDATA[<center>常用的hive时间处理函数</center>
<!-- more -->
<h2 id="from_unixtime-时间戳转日期">from_unixtime (时间戳转日期)</h2>
<p>语法：<code>from_unixtime(bigint unixtime[, string pattern])</code><br>
返回值：string<br>
说明：转化UNIX时间戳（从1970-01-0100:00:00 UTC到指定时间的秒数）到当前时区的时间格式。</p>
<pre><code class="language-SQL">select from_unixtime(1614657355, 'yyyy-MM-dd HH:mm:ss') from table_name
&gt; 2021-03-02 11:55:55
</code></pre>
<h2 id="unix_timestamp-日期转时间戳">unix_timestamp (日期转时间戳)</h2>
<p>语法：<code>unix_timestamp([[string datetime], string pattern])</code><br>
返回值：bigint<br>
说明：转化UNIX时间戳（从1970-01-0100:00:00 UTC到指定时间的秒数）到当前时区的时间格式。</p>
<pre><code class="language-SQL">-- 默认当前时间戳
select unix_timestamp() from table

-- 指定时间的时间戳
select unix_timestamp('2021-03-02 11:55:55') from table
&gt; 1614657355
select unix_timestamp('2021-03-02 11:55:55', 'yyyy-MM-dd HH:mm:ss') from table
&gt; 1614657355
</code></pre>
<h2 id="to_date-字符串转日期">to_date (字符串转日期)</h2>
<p>语法：<code>to_date(string datetime)</code><br>
返回值：string<br>
说明：返回字符串格式日期时间字段中的日期部分。</p>
<pre><code class="language-SQL">select to_date('2021-03-02 11:55:55') from table
&gt; 2021-03-02
</code></pre>
<h2 id="year-返回日期中的年">year (返回日期中的年)</h2>
<p>语法：<code>year(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的年。</p>
<pre><code class="language-SQL">select year('2021-03-02 11:55:55') from table
&gt; 2021
select year('2021-03-02') from table
&gt; 2021
</code></pre>
<h2 id="month-返回日期中的月份">month (返回日期中的月份)</h2>
<p>语法：<code>month(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的月份。</p>
<pre><code class="language-SQL">select month('2021-03-02 11:55:55') from table
&gt; 3
select month('2021-03-02') from table
&gt; 3
</code></pre>
<h2 id="day-返回日期中的天">day (返回日期中的天)</h2>
<p>语法：<code>day(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的天。</p>
<pre><code class="language-SQL">select day('2021-03-02 11:55:55') from table
&gt; 2
select day('2021-03-02') from table
&gt; 2
</code></pre>
<h2 id="hour-日期中的小时">hour (日期中的小时)</h2>
<p>语法：<code>hour(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的小时。</p>
<pre><code class="language-SQL">select hour('2021-03-02 11:55:55') from table
&gt; 11
</code></pre>
<h2 id="minute-日期中的分钟">minute (日期中的分钟)</h2>
<p>语法：<code>minute(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的分钟。</p>
<pre><code class="language-SQL">select minute('2021-03-02 11:55:55') from table
&gt; 55
</code></pre>
<h2 id="second-日期中的秒">second (日期中的秒)</h2>
<p>语法：<code>second(string datetime)</code><br>
返回值：int<br>
说明：返回日期中的秒。</p>
<pre><code class="language-SQL">select second('2021-03-02 11:55:55') from table
&gt; 55
</code></pre>
<h2 id="weekofyear-日期在当前的周数">weekofyear (日期在当前的周数)</h2>
<p>语法：<code>weekofyear(string datetime)</code><br>
返回值：int<br>
说明：返回日期在当前的周数。</p>
<pre><code class="language-SQL">select weekofyear('2021-03-02 11:55:55') from table
&gt; 10
</code></pre>
<h2 id="datediff-日期比较">datediff (日期比较)</h2>
<p>语法：<code>datediff(string enddate,string startdate)</code><br>
返回值：int<br>
说明：返回结束日期减去开始日期的天数。</p>
<pre><code class="language-SQL">select datediff('2021-02-28', '2021-03-02') from table
&gt; 3
</code></pre>
<h2 id="date_add-日期增加">date_add (日期增加)</h2>
<p>语法：<code>date_add(string startdate, int days)</code><br>
返回值：string<br>
说明：返回开始日期startdate增加days天后的日期。</p>
<pre><code class="language-SQL">select date_add('2021-02-28', 1) from table
&gt; 2021-03-01
</code></pre>
<h2 id="date_sub-日期减少">date_sub (日期减少)</h2>
<p>语法：<code>date_sub(string startdate, int days)</code><br>
返回值：string<br>
说明：返回开始日期startdate减少days天后的日期。</p>
<pre><code class="language-SQL">select date_sub('2021-02-28', 1) from table
&gt; 2021-02-27
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive窗口函数]]></title>
        <id>https://dingdingtao.github.io/post/hive-chuang-kou-han-shu/</id>
        <link href="https://dingdingtao.github.io/post/hive-chuang-kou-han-shu/">
        </link>
        <updated>2021-03-01T02:01:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ntile">NTILE</h1>
<p>NTILE(n)，用于将分组数据按照顺序切分成n片，返回当前切片值<br>
NTILE不支持ROWS BETWEEN，比如 NTILE(2) OVER(PARTITION BY cookieid ORDER BY createtime ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)<br>
如果切片不均匀，默认增加第一个切片的分布</p>
<pre><code class="language-SQL">SELECT 
cookieid,
createtime,
pv,
NTILE(2) OVER(PARTITION BY cookieid ORDER BY createtime) AS rn1,	--分组内将数据分成2片
NTILE(3) OVER(PARTITION BY cookieid ORDER BY createtime) AS rn2,  --分组内将数据分成3片
NTILE(4) OVER(ORDER BY createtime) AS rn3        --将所有数据分成4片
FROM lxw1234 
ORDER BY cookieid,createtime;
 
cookieid day           pv       rn1     rn2     rn3
-------------------------------------------------
cookie1 2015-04-10      1       1       1       1
cookie1 2015-04-11      5       1       1       1
cookie1 2015-04-12      7       1       1       2
cookie1 2015-04-13      3       1       2       2
cookie1 2015-04-14      2       2       2       3
cookie1 2015-04-15      4       2       3       3
cookie1 2015-04-16      4       2       3       4
cookie2 2015-04-10      2       1       1       1
cookie2 2015-04-11      3       1       1       1
cookie2 2015-04-12      5       1       1       2
cookie2 2015-04-13      6       1       2       2
cookie2 2015-04-14      3       2       2       3
cookie2 2015-04-15      9       2       3       4
cookie2 2015-04-16      7       2       3       4
</code></pre>
<p>–比如，统计一个cookie，pv数最多的前1/3的天</p>
<pre><code class="language-SQL">SELECT 
cookieid,
createtime,
pv,
NTILE(3) OVER(PARTITION BY cookieid ORDER BY pv DESC) AS rn 
FROM lxw1234;
 
--rn = 1 的记录，就是我们想要的结果
 
cookieid day           pv       rn
----------------------------------
cookie1 2015-04-12      7       1
cookie1 2015-04-11      5       1
cookie1 2015-04-15      4       1
cookie1 2015-04-16      4       2
cookie1 2015-04-13      3       2
cookie1 2015-04-14      2       3
cookie1 2015-04-10      1       3
cookie2 2015-04-15      9       1
cookie2 2015-04-16      7       1
cookie2 2015-04-13      6       1
cookie2 2015-04-12      5       2
cookie2 2015-04-14      3       2
cookie2 2015-04-11      3       3
cookie2 2015-04-10      2       3
</code></pre>
<h1 id="row_number">ROW_NUMBER</h1>
<p>ROW_NUMBER() –从1开始，按照顺序，生成分组内记录的序列<br>
–比如，按照pv降序排列，生成分组内每天的pv名次<br>
ROW_NUMBER() 的应用场景非常多，再比如，获取分组内排序第一的记录;获取一个session中的第一条refer等。</p>
<pre><code class="language-SQL">SELECT 
cookieid,
createtime,
pv,
ROW_NUMBER() OVER(PARTITION BY cookieid ORDER BY pv desc) AS rn 
FROM lxw1234;
 
cookieid day           pv       rn
------------------------------------------- 
cookie1 2015-04-12      7       1
cookie1 2015-04-11      5       2
cookie1 2015-04-15      4       3
cookie1 2015-04-16      4       4
cookie1 2015-04-13      3       5
cookie1 2015-04-14      2       6
cookie1 2015-04-10      1       7
cookie2 2015-04-15      9       1
cookie2 2015-04-16      7       2
cookie2 2015-04-13      6       3
cookie2 2015-04-12      5       4
cookie2 2015-04-14      3       5
cookie2 2015-04-11      3       6
cookie2 2015-04-10      2       7
</code></pre>
<h1 id="rank-和-dense_rank">RANK 和 DENSE_RANK</h1>
<p>—RANK() 生成数据项在分组中的排名，排名相等会在名次中留下空位<br>
—DENSE_RANK() 生成数据项在分组中的排名，排名相等会在名次中不会留下空位</p>
<pre><code class="language-SQL">SELECT 
cookieid,
createtime,
pv,
RANK() OVER(PARTITION BY cookieid ORDER BY pv desc) AS rn1,
DENSE_RANK() OVER(PARTITION BY cookieid ORDER BY pv desc) AS rn2,
ROW_NUMBER() OVER(PARTITION BY cookieid ORDER BY pv DESC) AS rn3 
FROM lxw1234 
WHERE cookieid = 'cookie1';
 
cookieid day           pv       rn1     rn2     rn3 
-------------------------------------------------- 
cookie1 2015-04-12      7       1       1       1
cookie1 2015-04-11      5       2       2       2
cookie1 2015-04-15      4       3       3       3
cookie1 2015-04-16      4       3       3       4
cookie1 2015-04-13      3       5       4       5
cookie1 2015-04-14      2       6       5       6
cookie1 2015-04-10      1       7       6       7
 
rn1: 15号和16号并列第3, 13号排第5
rn2: 15号和16号并列第3, 13号排第4
rn3: 如果相等，则按记录值排序，生成唯一的次序，如果所有记录值都相等，或许会随机排吧。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive内置函数]]></title>
        <id>https://dingdingtao.github.io/post/hive-nei-zhi-han-shu/</id>
        <link href="https://dingdingtao.github.io/post/hive-nei-zhi-han-shu/">
        </link>
        <updated>2021-03-01T02:00:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="内置函数">内置函数</h2>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>签名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>BIGINT</td>
<td>round(double a)</td>
<td>返回BIGINT最近的double值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>floor(double a)</td>
<td>返回最大BIGINT值等于或小于double</td>
</tr>
<tr>
<td>BIGINT</td>
<td>ceil(double a)</td>
<td>返回最小BIGINT值等于或大于double</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>rand(),rand(int seed)</td>
<td>它返回一个随机数，从行改变到行</td>
</tr>
<tr>
<td>STRING</td>
<td>concat(string A,string B,...)</td>
<td>它返回从A后串联B产生的字符串</td>
</tr>
<tr>
<td>STRING</td>
<td>substr(string A,int start)</td>
<td>它返回一个起始，从起始位置的子字符串，直到A结束</td>
</tr>
<tr>
<td>STRING</td>
<td>substr(string A, int start, int length)</td>
<td>返回从给定长度的起始start位置开始的字符串</td>
</tr>
<tr>
<td>STRING</td>
<td>upper(string A)</td>
<td>它返回从转换的所有字符为大写产生的字符串</td>
</tr>
<tr>
<td>STRING</td>
<td>ucase(string A)</td>
<td>和上面的一样</td>
</tr>
<tr>
<td>STRING</td>
<td>lower(string A)</td>
<td>它返回转换B的所有字符为小写产生的字符串</td>
</tr>
<tr>
<td>STRING</td>
<td>lcase(string A)</td>
<td>和上面的一样</td>
</tr>
<tr>
<td>STRING</td>
<td>trim(string A)</td>
<td>它返回字符串从A.两端修剪空格的结果</td>
</tr>
<tr>
<td>STRING</td>
<td>ltrim(string A)</td>
<td>它返回A从一开始修整空格产生的字符串(左手侧)</td>
</tr>
<tr>
<td>STRING</td>
<td>rtrim(string A)</td>
<td>它返回A从结束修整空格产生的字符串(右侧)</td>
</tr>
<tr>
<td>STRING</td>
<td>regexp_replace(string A, string B, string C)</td>
<td>它返回从替换所有子在B结果配合C.在Java正则表达式语法的字符串</td>
</tr>
<tr>
<td>INT</td>
<td>size(Map&lt;K,V&gt;)</td>
<td>它返回在映射类型的元素的数量</td>
</tr>
<tr>
<td>INT</td>
<td>size(Array<T>)</td>
<td>它返回在数组类型元素的数量</td>
</tr>
<tr>
<td>value of <type></td>
<td>cast(<expr> as <type>)</td>
<td>它把表达式的结果expr&lt;类型&gt;如cast('1'作为BIGINT)代表整体转换为字符串'1'。如果转换不成功，返回的是NULL</td>
</tr>
<tr>
<td>STRING</td>
<td>from_unixtime(int unixtime)</td>
<td>转换的秒数从Unix纪元(1970-01-0100:00:00 UTC)代表那一刻，在当前系统时区的时间戳字符的串格式：&quot;1970-01-01 00:00:00&quot;</td>
</tr>
<tr>
<td>STRING</td>
<td>to_date(string timestamp)</td>
<td>返回一个字符串时间戳的日期部分：to_date(&quot;1970-01-01 00:00:00&quot;) = &quot;1970-01-01&quot;</td>
</tr>
<tr>
<td>INT</td>
<td>year(string date)</td>
<td>返回年份部分的日期或时间戳字符串：year(&quot;1970-01-01 00:00:00&quot;) = 1970, year(&quot;1970-01-01&quot;) = 1970</td>
</tr>
<tr>
<td>INT</td>
<td>month(string date)</td>
<td>返回日期或时间戳记字符串月份部分：month(&quot;1970-11-01 00:00:00&quot;) = 11, month(&quot;1970-11-01&quot;) = 11</td>
</tr>
<tr>
<td>INT</td>
<td>day(string date)</td>
<td>返回日期或时间戳记字符串当天部分：day(&quot;1970-11-01 00:00:00&quot;) = 1, day(&quot;1970-11-01&quot;) = 1</td>
</tr>
<tr>
<td>STRING</td>
<td>get_json_object(string json_string, string path)</td>
<td>提取从基于指定的JSON路径的JSON字符串JSON对象，并返回提取的JSON字符串的JSON对象。如果输入的JSON字符串无效，返回NULL</td>
</tr>
</tbody>
</table>
<h2 id="聚合函数">聚合函数</h2>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>签名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>BIGINT</td>
<td>count(*), count(expr)</td>
<td>返回检索行的总数</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>sum(col), sum(DISTINCT col)</td>
<td>返回该组或该组中的列的不同值的分组和所有元素的总和</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>avg(col), avg(DISTINCT col)</td>
<td>返回上述组或该组中的列的不同值的元素的平均值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>min(col)</td>
<td>返回该组中的列的最小值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>max(col)</td>
<td>返回该组中的列的最大值</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hive列转行]]></title>
        <id>https://dingdingtao.github.io/post/hive-lie-zhuan-hang/</id>
        <link href="https://dingdingtao.github.io/post/hive-lie-zhuan-hang/">
        </link>
        <updated>2021-03-01T01:58:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="列转行">列转行</h1>
<h2 id="collect_set">collect_set</h2>
<p>concat_ws(',',collect_set(column)) ：去重</p>
<h2 id="collect_list">collect_list</h2>
<p>concat_ws(',',collect_list(column)) ：不去重</p>
]]></content>
    </entry>
</feed>